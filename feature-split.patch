--- flutter-extractor	2025-07-23
+++ flutter-extractor	2025-07-23
@@ -605,6 +605,7 @@ extract_flutter_app() {
     local generate_docs=false
     local compression_level=6
     local archive_format="tar.gz"
+    local split_features=false   # NEW
     local exclude_patterns=()
 
     # Parse options
@@ -655,6 +656,10 @@ extract_flutter_app() {
                 archive_format="$2"
                 shift 2
                 ;;
+            --split-features)          # NEW
+                split_features=true
+                shift
+                ;;
             *)
                 print_error "Unknown option: $1"
                 exit 1
@@ -762,6 +767,12 @@ ENHANCED_MAIN_START
     [ "$verbose" = true ] && print_status "Found $total_files Dart files to process"
 
+    # NEW: create features/ structure switch
+    if [ "$split_features" = true ]; then
+        echo "mkdir -p features" >> "$output_script"
+        echo "print_status \"Splitting code into feature modules...\"" >> "$output_script"
+    fi
+
     # Create enhanced generator script
     cat > "$output_script" << 'ENHANCED_GENERATOR_START'
 #!/bin/bash
@@ -857,6 +868,32 @@ validate_environment() {
     return 0
 }
 
+# NEW: helper to classify a file into a feature name
+feature_name_from_path() {
+    local file_path="$1"
+    local basename_file
+    basename_file=$(basename "$file_path" .dart)
+
+    # Heuristic: screen → screens, model → models, etc.
+    case "$file_path" in
+        */screens/*|*/views/*)
+            echo "screens"
+            ;;
+        */models/*)
+            echo "models"
+            ;;
+        */widgets/*)
+            echo "widgets"
+            ;;
+        */services/*|*/repositories/*)
+            echo "services"
+            ;;
+        *)
+            echo "${basename_file%_*}" # fallback: filename prefix
+            ;;
+    esac
+}
+
 # Show detailed help
 show_help() {
     print_header
@@ -941,7 +978,7 @@ main() {
     cd "$APP_NAME"
 
     # Clean default files
-    print_status "Cleaning default files..."
+    print_status "Preparing project structure..."
     rm -f lib/main.dart
     [ -d "test" ] && rm -rf test/*
 
@@ -949,6 +986,21 @@ main() {
     local total_files=TOTAL_FILES_PLACEHOLDER
 
     print_status "Generating app structure and code..."
+
+    # NEW: create features folder and main aggregator
+    if [ "$split_features" = true ]; then
+        cat >> "$output_script" << 'FEATURES_SETUP'
+# Initialize feature modules
+mkdir -p lib/features
+touch lib/main.dart
+
+cat > lib/main.dart << 'MAIN_EOF'
+// Auto-generated feature aggregator
+// Do not edit by hand
+void main() => runApp(const MyApp());
+MAIN_EOF
+FEATURES_SETUP
+    fi
 }
 
 # Process files with progress tracking
@@ -961,21 +1013,46 @@ main() {
         echo "PUBSPEC_EOF" >> "$output_script"
         echo "print_status \"✓ Updated pubspec.yaml\"" >> "$output_script"
         echo "((file_count++))" >> "$output_script"
-        echo "show_progress \$file_count \$total_files" >> "$output_script"
         echo "" >> "$output_script"
     fi
 
-    # Process Dart files with progress
+    # NEW: two processing modes
     while IFS= read -r -d '' file; do
         local relative_path="${file#$source_dir/}"
-        local dir_path=$(dirname "$relative_path")
+        local filename=$(basename "$relative_path")
+        local feature_name
+
+        if [ "$split_features" = true ]; then
+            feature_name=$(feature_name_from_path "$relative_path")
+            echo "mkdir -p \"lib/features/$feature_name\"" >> "$output_script"
 
-        [ "$verbose" = true ] && show_progress $current_file $total_files
+            # Write file into its feature folder
+            echo "cat > 'lib/features/$feature_name/$filename' << 'DART_EOF'" >> "$output_script"
+            cat "$file" | escape_for_heredoc >> "$output_script"
+            echo "DART_EOF" >> "$output_script"
 
-        # Create directory structure
-        if [ "$dir_path" != "." ]; then
-            echo "mkdir -p \"lib/$dir_path\"" >> "$output_script"
+            # Append export line to main.dart
+            echo "echo 'export \"features/$feature_name/$filename\";' >> lib/main.dart" >> "$output_script"
+
+            # Handle main.dart separately if it exists
+            if [[ "$filename" == "main.dart" ]]; then
+                echo "echo '' > lib/main.dart" >> "$output_script"
+                echo "cat >> lib/main.dart << 'MAIN_EOF'" >> "$output_script"
+                cat "$file" | escape_for_heredoc >> "$output_script"
+                echo "MAIN_EOF" >> "$output_script"
+            fi
+        else
+            # Legacy mode: keep original structure
+            local dir_path=$(dirname "$relative_path")
+            if [ "$dir_path" != "." ]; then
+                echo "mkdir -p \"lib/$dir_path\"" >> "$output_script"
+            fi
+
+            echo "cat > 'lib/$relative_path' << 'DART_EOF'" >> "$output_script"
+            cat "$file" | escape_for_heredoc >> "$output_script"
+            echo "DART_EOF" >> "$output_script"
         fi
 
         # Add file content with progress
@@ -1049,6 +1126,7 @@ main() {
 
     # Update total files count in the script
     sed -i.bak "s/TOTAL_FILES_PLACEHOLDER/$total_files/" "$output_script" && rm "$output_script.bak" 2>/dev/null || sed -i "s/TOTAL_FILES_PLACEHOLDER/$total_files/" "$output_script"
+    sed -i.bak "s/TOTAL_FILES_PLACEHOLDER/$total_files/" "$output_script"
 
     chmod +x "$output_script"
 
@@ -1062,6 +1140,7 @@ main() {
     [ "$include_tests" = true ] && echo "  ${GREEN}✓${NC} Test files included"
     [ "$create_archive" = true ] && echo "  ${GREEN}✓${NC} Backup archive created"
     [ "$generate_docs" = true ] && echo "  ${GREEN}✓${NC} Documentation generated"
+    [ "$split_features" = true ] && echo "  ${GREEN}✓${NC} Features split into modules"
 
     echo ""
     print_success "Generator script: ${BOLD}$output_script${NC}"
@@ -1105,6 +1184,7 @@ show_help() {
     echo "  --exclude PATTERN      Exclude files matching pattern"
     echo "  --format FORMAT        Archive format (tar.gz, zip)"
+    echo "  --split-features       Extract each logical feature into its own file under lib/features/"
     echo ""
     echo "TEMPLATE COMMANDS:"
     echo "  template list          List available templates"