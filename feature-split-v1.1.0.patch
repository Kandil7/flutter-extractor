--- flutter-extractor	2025-07-23
+++ flutter-extractor	2025-07-23
@@
 # Main extraction function
 extract_flutter_app() {
     local source_dir="./lib"
     local output_script="generate_flutter_app.sh"
     local app_name="extracted_flutter_app"
     local include_pubspec=false
     local include_assets=false
     local force_overwrite=false
     local verbose=false
+    local split_features=false      # NEW
+    local recreate=false            # NEW
@@
     # Parse options
     while [[ $# -gt 0 ]]; do
         case $1 in
@@
+            --split-features)
+                split_features=true
+                shift
+                ;;
+            --recreate)
+                recreate=true
+                shift
+                ;;
@@
 # Help function
 show_help() {
@@
     echo "  -f, --force             Overwrite existing output file"
     echo "  -v, --verbose           Verbose output"
+    echo ""
+    echo "  --split-features        Extract each logical feature into its own file under lib/features/"
+    echo "  --recreate              Force overwrite existing feature files (default = update-in-place)"
@@
 # Process Dart files
-    dart_files_count=0
-    while IFS= read -r -d '' file; do
-        local relative_path="${file#$source_dir/}"
-        local dir_path=$(dirname "$relative_path")
-
-        [ "$verbose" = true ] && print_status "Processing: $relative_path"
-
-        # Create directory if needed
-        if [ "$dir_path" != "." ]; then
-            echo "mkdir -p \"lib/$dir_path\"" >> "$output_script"
-        fi
-
-        # Add file content
-        echo "cat > 'lib/$relative_path' << 'DART_EOF'" >> "$output_script"
-        cat "$file" | escape_for_heredoc >> "$output_script"
-        echo "" >> "$output_script"
-        echo "DART_EOF" >> "$output_script"
-        echo "print_status \"Created: lib/$relative_path\"" >> "$output_script"
-        echo "" >> "$output_script"
-
-        ((dart_files_count++))
-    done < <(find "$source_dir" -name "*.dart" -type f -print0)
+    dart_files_count=0
+    while IFS= read -r -d '' file; do
+        local relative_path="${file#$source_dir/}"
+        local filename=$(basename "$relative_path")
+        local feature_name
+
+        # Heuristic for feature name
+        case "$relative_path" in
+            */screens/*|*/views/*)  feature_name="screens" ;;
+            */models/*)             feature_name="models" ;;
+            */widgets/*)            feature_name="widgets" ;;
+            */services/*|*/repositories/*) feature_name="services" ;;
+            *)                      feature_name="${filename%_*}" ;;
+        esac
+
+        if [ "$feature_name" = "main" ]; then
+            # keep main.dart in lib/
+            dest_file="lib/$filename"
+            mkdir_cmd="mkdir -p \"lib\""
+        else
+            dest_file="lib/features/$feature_name/$filename"
+            mkdir_cmd="mkdir -p \"lib/features/$feature_name\""
+        fi
+
+        echo "$mkdir_cmd" >> "$output_script"
+
+        # Incremental vs recreate
+        if [ "$recreate" = true ]; then
+            echo "cat > '$dest_file' << 'DART_EOF'" >> "$output_script"
+            cat "$file" | escape_for_heredoc >> "$output_script"
+            echo "DART_EOF" >> "$output_script"
+            echo "print_status \"Created: $dest_file\"" >> "$output_script"
+        else
+            # Only write if file changed
+            echo "tmpfile=\$(mktemp)" >> "$output_script"
+            echo "cat > \"\$tmpfile\" << 'DART_EOF'" >> "$output_script"
+            cat "$file" | escape_for_heredoc >> "$output_script"
+            echo "DART_EOF" >> "$output_script"
+            echo "if [ ! -f '$dest_file' ] || ! cmp -s \"\$tmpfile\" '$dest_file'; then" >> "$output_script"
+            echo "    mv \"\$tmpfile\" '$dest_file'" >> "$output_script"
+            echo "    print_status \"Updated: $dest_file\"" >> "$output_script"
+            echo "else" >> "$output_script"
+            echo "    rm \"\$tmpfile\"" >> "$output_script"
+            echo "    print_status \"No change, skipped: $dest_file\"" >> "$output_script"
+            echo "fi" >> "$output_script"
+        fi
+
+        ((dart_files_count++))
+    done < <(find "$source_dir" -name "*.dart" -type f -print0)