#!/bin/bash

# Flutter Code Extractor CLI Tool
# A global CLI tool to extract and recreate Flutter apps
# Version: 1.1.0

set -e

VERSION="1.1.0"
TOOL_NAME="flutter-extractor"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Functions for colored output
print_header() {
    echo -e "${PURPLE}╭─────────────────────────────────────────╮${NC}"
    echo -e "${PURPLE}│         Flutter Code Extractor         │${NC}"
    echo -e "${PURPLE}│              Version $VERSION             │${NC}"
    echo -e "${PURPLE}╰─────────────────────────────────────────╯${NC}"
    echo ""
}

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_command() {
    echo -e "${CYAN}$ $1${NC}"
}

# Help function
show_help() {
    print_header
    echo "USAGE:"
    echo "  $TOOL_NAME [COMMAND] [OPTIONS]"
    echo ""
    echo "COMMANDS:"
    echo "  extract     Extract Flutter app code to a generator script"
    echo "  install     Install this CLI tool globally"
    echo "  uninstall   Remove this CLI tool from system"
    echo "  version     Show version information"
    echo "  help        Show this help message"
    echo ""
    echo "EXTRACT OPTIONS:"
    echo "  -s, --source DIR        Source directory (default: current directory)"
    echo "  -o, --output FILE       Output script name (default: generate_flutter_app.sh)"
    echo "  -n, --name NAME         Default app name in generator (default: extracted_flutter_app)"
    echo "  -p, --pubspec           Include pubspec.yaml in extraction"
    echo "  -a, --assets            Include assets folder in extraction"
    echo "  -c, --config            Include analysis_options.yaml and .gitignore"
    echo "  -f, --force             Overwrite existing output file"
    echo "  -v, --verbose           Verbose output"
    echo ""
    echo "EXAMPLES:"
    echo "  $TOOL_NAME extract                          # Basic extraction from current dir"
    echo "  $TOOL_NAME extract -p -a -c                 # Include pubspec, assets, and config"
    echo "  $TOOL_NAME extract -o my_app_backup.sh      # Custom output name"
    echo "  $TOOL_NAME extract -s ./my_project -n MyApp # Custom source and app name"
    echo ""
}

# Version function
show_version() {
    print_header
    echo "Flutter Code Extractor CLI v$VERSION"
    echo "A tool to extract and recreate Flutter applications"
    echo ""
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Install function
install_cli() {
    print_header
    print_status "Installing Flutter Code Extractor CLI..."
    
    # Check if running from a proper location
    if [ ! -f "$0" ]; then
        print_error "Installation script not found. Please run this from the script location."
        exit 1
    fi
    
    # Determine installation directory
    INSTALL_DIR=""
    NEED_SUDO=false
    
    if [ -d "$HOME/.local/bin" ] && [[ ":$PATH:" == *":$HOME/.local/bin:"* ]]; then
        INSTALL_DIR="$HOME/.local/bin"
    elif [ -d "/usr/local/bin" ] && [[ ":$PATH:" == *":/usr/local/bin:"* ]]; then
        INSTALL_DIR="/usr/local/bin"
        NEED_SUDO=true
    else
        INSTALL_DIR="$HOME/.local/bin"
        mkdir -p "$INSTALL_DIR"
        print_warning "Created $INSTALL_DIR"
        print_warning "Add this to your ~/.bashrc or ~/.zshrc:"
        print_command "export PATH=\"\$HOME/.local/bin:\$PATH\""
        echo ""
    fi
    
    # Copy script to installation directory
    TARGET="$INSTALL_DIR/$TOOL_NAME"
    
    if [ "$NEED_SUDO" = true ]; then
        if ! command_exists sudo; then
            print_error "sudo is required to install to /usr/local/bin"
            exit 1
        fi
        sudo cp "$0" "$TARGET"
        sudo chmod +x "$TARGET"
    else
        cp "$0" "$TARGET"
        chmod +x "$TARGET"
    fi
    
    print_success "Installed to: $TARGET"
    print_status "You can now use '$TOOL_NAME' from anywhere!"
    
    # Verify installation
    if command_exists "$TOOL_NAME"; then
        print_success "Installation verified - '$TOOL_NAME' is available in PATH"
    else
        print_warning "Installation complete but '$TOOL_NAME' not found in PATH"
        print_status "You may need to restart your terminal or run: source ~/.bashrc"
    fi
}

# Uninstall function
uninstall_cli() {
    print_header
    print_status "Uninstalling Flutter Code Extractor CLI..."
    
    # Find and remove the installed script
    FOUND=false
    for dir in "$HOME/.local/bin" "/usr/local/bin"; do
        TARGET="$dir/$TOOL_NAME"
        if [ -f "$TARGET" ]; then
            if [ "$dir" = "/usr/local/bin" ]; then
                if command_exists sudo; then
                    sudo rm "$TARGET"
                    print_success "Removed from: $TARGET"
                    FOUND=true
                else
                    print_error "sudo required to remove from $TARGET"
                fi
            else
                rm "$TARGET"
                print_success "Removed from: $TARGET"
                FOUND=true
            fi
        fi
    done
    
    if [ "$FOUND" = false ]; then
        print_warning "CLI tool not found in standard installation directories"
        print_status "It may have been installed elsewhere or already removed"
    fi
}

# Function to escape content for bash heredoc
escape_for_heredoc() {
    # Escape single quotes and backslashes properly
    sed "s/\\\\/\\\\\\\\/g" | sed "s/'/'\\\\''/g"
}

# Function to validate Flutter project
validate_flutter_project() {
    local dir="$1"
    
    # Check if it's a Flutter project root
    if [ -f "$dir/pubspec.yaml" ]; then
        if grep -q "flutter:" "$dir/pubspec.yaml" 2>/dev/null; then
            return 0
        fi
    fi
    
    # Check if lib directory exists
    if [ -d "$dir/lib" ]; then
        return 0
    fi
    
    return 1
}

# Function to get relative path
get_relative_path() {
    local file_path="$1"
    local base_path="$2"
    echo "${file_path#$base_path/}"
}

# Main extraction function
extract_flutter_app() {
    local source_dir="."
    local output_script="generate_flutter_app.sh"
    local app_name="extracted_flutter_app"
    local include_pubspec=false
    local include_assets=false
    local include_config=false
    local force_overwrite=false
    local verbose=false
    
    # Parse options
    while [[ $# -gt 0 ]]; do
        case $1 in
            -s|--source)
                if [ -z "$2" ] || [[ "$2" == -* ]]; then
                    print_error "Option $1 requires an argument"
                    exit 1
                fi
                source_dir="$2"
                shift 2
                ;;
            -o|--output)
                if [ -z "$2" ] || [[ "$2" == -* ]]; then
                    print_error "Option $1 requires an argument"
                    exit 1
                fi
                output_script="$2"
                shift 2
                ;;
            -n|--name)
                if [ -z "$2" ] || [[ "$2" == -* ]]; then
                    print_error "Option $1 requires an argument"
                    exit 1
                fi
                app_name="$2"
                shift 2
                ;;
            -p|--pubspec)
                include_pubspec=true
                shift
                ;;
            -a|--assets)
                include_assets=true
                shift
                ;;
            -c|--config)
                include_config=true
                shift
                ;;
            -f|--force)
                force_overwrite=true
                shift
                ;;
            -v|--verbose)
                verbose=true
                shift
                ;;
            *)
                print_error "Unknown option: $1"
                echo ""
                show_help
                exit 1
                ;;
        esac
    done
    
    # Resolve absolute path
    source_dir=$(cd "$source_dir" 2>/dev/null && pwd) || {
        print_error "Source directory '$source_dir' not found or inaccessible!"
        exit 1
    }
    
    # Validate Flutter project
    if ! validate_flutter_project "$source_dir"; then
        print_warning "The source directory doesn't appear to be a Flutter project"
        print_status "Continuing anyway, but results may not work correctly"
    fi
    
    # Check if output file exists
    if [ -f "$output_script" ] && [ "$force_overwrite" != true ]; then
        print_error "Output file '$output_script' already exists!"
        print_status "Use -f or --force to overwrite"
        exit 1
    fi
    
    # Validate app name
    if [[ ! "$app_name" =~ ^[a-z][a-z0-9_]*$ ]]; then
        print_warning "App name '$app_name' may not be valid for Flutter"
        print_status "Flutter app names should be lowercase with underscores"
    fi
    
    print_header
    print_status "Extracting Flutter app code..."
    [ "$verbose" = true ] && print_status "Source directory: $source_dir"
    [ "$verbose" = true ] && print_status "Output script: $output_script"
    [ "$verbose" = true ] && print_status "Default app name: $app_name"
    
    # Create temporary file first, then move to final location
    local temp_script="${output_script}.tmp"
    
    # Start creating the generator script
    cat > "$temp_script" << 'GENERATOR_SCRIPT_START'
#!/bin/bash

# Generated Flutter App Recreation Script
# Created by Flutter Code Extractor CLI

set -e

# Colors and functions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

print_header() {
    echo -e "${PURPLE}╭─────────────────────────────────────────╮${NC}"
    echo -e "${PURPLE}│      Flutter App Generator Script      │${NC}"
    echo -e "${PURPLE}╰─────────────────────────────────────────╯${NC}"
    echo ""
}

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Show help
show_help() {
    echo "USAGE: $0 [app_name] [options]"
    echo ""
    echo "OPTIONS:"
    echo "  -h, --help      Show this help"
    echo "  --skip-deps     Skip flutter pub get"
    echo "  --skip-doctor   Skip flutter doctor"
    echo "  --clean         Remove existing directory if it exists"
    echo ""
    echo "EXAMPLE:"
    echo "  $0 my_awesome_app"
    echo "  $0 my_app --clean --skip-doctor"
    echo ""
}

# Parse arguments
APP_NAME=""
SKIP_DEPS=false
SKIP_DOCTOR=false
CLEAN_EXISTING=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        --skip-deps)
            SKIP_DEPS=true
            shift
            ;;
        --skip-doctor)
            SKIP_DOCTOR=true
            shift
            ;;
        --clean)
            CLEAN_EXISTING=true
            shift
            ;;
        -*)
            print_error "Unknown option: $1"
            show_help
            exit 1
            ;;
        *)
            if [ -z "$APP_NAME" ]; then
                APP_NAME="$1"
            else
                print_error "Multiple app names specified"
                exit 1
            fi
            shift
            ;;
    esac
done

GENERATOR_SCRIPT_START

    # Add default app name to generator
    echo "# Set default app name if not provided" >> "$temp_script"
    echo "APP_NAME=\"\${APP_NAME:-$app_name}\"" >> "$temp_script"
    echo "" >> "$temp_script"
    
    # Add main generation logic
    cat >> "$temp_script" << 'GENERATOR_MAIN_START'
print_header
print_status "Creating Flutter app: $APP_NAME"

# Validate app name
if [[ ! "$APP_NAME" =~ ^[a-z][a-z0-9_]*$ ]]; then
    print_error "Invalid app name: $APP_NAME"
    print_error "App names must be lowercase, start with a letter, and contain only letters, numbers, and underscores"
    exit 1
fi

# Check if Flutter is installed
if ! command -v flutter &> /dev/null; then
    print_error "Flutter is not installed or not in PATH"
    print_error "Please install Flutter: https://flutter.dev/docs/get-started/install"
    exit 1
fi

# Handle existing directory
if [ -d "$APP_NAME" ]; then
    if [ "$CLEAN_EXISTING" = true ]; then
        print_warning "Removing existing directory: $APP_NAME"
        rm -rf "$APP_NAME"
    else
        print_error "Directory '$APP_NAME' already exists!"
        print_status "Use --clean flag to remove it automatically"
        exit 1
    fi
fi

# Create new Flutter app
print_status "Creating new Flutter project..."
if ! flutter create "$APP_NAME" --quiet; then
    print_error "Failed to create Flutter project"
    exit 1
fi

cd "$APP_NAME"

# Remove default files
rm -f lib/main.dart
[ -d "test" ] && rm -rf test/*

print_status "Generating app structure and code..."

GENERATOR_MAIN_START

    # Process pubspec.yaml if requested
    if [ "$include_pubspec" = true ] && [ -f "$source_dir/pubspec.yaml" ]; then
        [ "$verbose" = true ] && print_status "Including pubspec.yaml"
        echo "# Replace pubspec.yaml" >> "$temp_script"
        echo "cat > 'pubspec.yaml' << 'PUBSPEC_EOF'" >> "$temp_script"
        escape_for_heredoc < "$source_dir/pubspec.yaml" >> "$temp_script"
        echo "" >> "$temp_script"
        echo "PUBSPEC_EOF" >> "$temp_script"
        echo "print_status \"Updated pubspec.yaml\"" >> "$temp_script"
        echo "" >> "$temp_script"
    fi
    
    # Process config files if requested
    if [ "$include_config" = true ]; then
        if [ -f "$source_dir/analysis_options.yaml" ]; then
            [ "$verbose" = true ] && print_status "Including analysis_options.yaml"
            echo "# Add analysis_options.yaml" >> "$temp_script"
            echo "cat > 'analysis_options.yaml' << 'ANALYSIS_EOF'" >> "$temp_script"
            escape_for_heredoc < "$source_dir/analysis_options.yaml" >> "$temp_script"
            echo "" >> "$temp_script"
            echo "ANALYSIS_EOF" >> "$temp_script"
            echo "print_status \"Created analysis_options.yaml\"" >> "$temp_script"
            echo "" >> "$temp_script"
        fi
        
        if [ -f "$source_dir/.gitignore" ]; then
            [ "$verbose" = true ] && print_status "Including .gitignore"
            echo "# Add .gitignore" >> "$temp_script"
            echo "cat > '.gitignore' << 'GITIGNORE_EOF'" >> "$temp_script"
            escape_for_heredoc < "$source_dir/.gitignore" >> "$temp_script"
            echo "" >> "$temp_script"
            echo "GITIGNORE_EOF" >> "$temp_script"
            echo "print_status \"Updated .gitignore\"" >> "$temp_script"
            echo "" >> "$temp_script"
        fi
    fi
    
    # Process Dart files from lib directory
    local lib_dir="$source_dir/lib"
    local dart_files_count=0
    
    if [ -d "$lib_dir" ]; then
        while IFS= read -r -d '' file; do
            local relative_path=$(get_relative_path "$file" "$lib_dir")
            local dir_path=$(dirname "$relative_path")
            
            [ "$verbose" = true ] && print_status "Processing: lib/$relative_path"
            
            # Create directory if needed
            if [ "$dir_path" != "." ]; then
                echo "mkdir -p \"lib/$dir_path\"" >> "$temp_script"
            fi
            
            # Add file content
            echo "cat > 'lib/$relative_path' << 'DART_EOF'" >> "$temp_script"
            escape_for_heredoc < "$file" >> "$temp_script"
            echo "" >> "$temp_script"
            echo "DART_EOF" >> "$temp_script"
            echo "print_status \"Created: lib/$relative_path\"" >> "$temp_script"
            echo "" >> "$temp_script"
            
            ((dart_files_count++))
        done < <(find "$lib_dir" -name "*.dart" -type f -print0 2>/dev/null || true)
    fi
    
    # Process assets if requested
    local assets_count=0
    if [ "$include_assets" = true ] && [ -d "$source_dir/assets" ]; then
        [ "$verbose" = true ] && print_status "Including assets folder"
        echo "# Copy assets" >> "$temp_script"
        echo "rm -rf assets" >> "$temp_script"
        echo "mkdir -p assets" >> "$temp_script"
        echo "" >> "$temp_script"
        
        while IFS= read -r -d '' file; do
            local relative_path=$(get_relative_path "$file" "$source_dir/assets")
            local dir_path=$(dirname "$relative_path")
            
            [ "$verbose" = true ] && print_status "Processing asset: assets/$relative_path"
            
            if [ "$dir_path" != "." ]; then
                echo "mkdir -p \"assets/$dir_path\"" >> "$temp_script"
            fi
            
            # Check if file is binary or text
            if file "$file" | grep -q "text"; then
                # Text file - use cat with heredoc
                echo "cat > 'assets/$relative_path' << 'ASSET_EOF'" >> "$temp_script"
                escape_for_heredoc < "$file" >> "$temp_script"
                echo "" >> "$temp_script"
                echo "ASSET_EOF" >> "$temp_script"
            else
                # Binary file - use base64 encoding
                echo "base64 -d << 'ASSET_EOF' > 'assets/$relative_path'" >> "$temp_script"
                base64 < "$file" >> "$temp_script"
                echo "ASSET_EOF" >> "$temp_script"
            fi
            
            echo "print_status \"Created: assets/$relative_path\"" >> "$temp_script"
            echo "" >> "$temp_script"
            
            ((assets_count++))
        done < <(find "$source_dir/assets" -type f -print0 2>/dev/null || true)
    fi
    
    # Add final steps
    cat >> "$temp_script" << 'GENERATOR_END'

# Final steps
if [ "$SKIP_DEPS" != true ]; then
    print_status "Getting Flutter packages..."
    if ! flutter pub get; then
        print_warning "flutter pub get failed, but continuing..."
    fi
fi

if [ "$SKIP_DOCTOR" != true ]; then
    print_status "Running Flutter doctor..."
    flutter doctor || print_warning "Flutter doctor reported issues, but app was created"
fi

print_success "Flutter app '$APP_NAME' created successfully!"
print_status "To run the app:"
print_status "  cd $APP_NAME"
print_status "  flutter run"
echo ""

GENERATOR_END

    # Move temp file to final location and set permissions
    mv "$temp_script" "$output_script"
    chmod +x "$output_script"
    
    echo ""
    print_success "Extraction completed!"
    print_status "Found and processed $dart_files_count Dart files"
    [ "$include_pubspec" = true ] && print_status "Included pubspec.yaml"
    [ "$include_assets" = true ] && print_status "Included $assets_count asset files"
    [ "$include_config" = true ] && print_status "Included configuration files"
    print_success "Generator script created: $output_script"
    echo ""
    print_status "To recreate the Flutter app:"
    print_command "./$output_script [app_name]"
    echo ""
}

# Main command dispatcher
main() {
    case "${1:-help}" in
        extract)
            shift
            extract_flutter_app "$@"
            ;;
        install)
            install_cli
            ;;
        uninstall)
            uninstall_cli
            ;;
        version)
            show_version
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            if [ -n "$1" ]; then
                print_error "Unknown command: $1"
                echo ""
            fi
            show_help
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"