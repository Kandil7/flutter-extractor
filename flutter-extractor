#!/bin/bash

# Flutter Code Extractor CLI Tool
# A global CLI tool to extract and recreate Flutter apps
# Version: 1.0.0

set -e

VERSION="1.0.0"
TOOL_NAME="flutter-extractor"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Functions for colored output
print_header() {
    echo -e "${PURPLE}╭─────────────────────────────────────────╮${NC}"
    echo -e "${PURPLE}│         Flutter Code Extractor         │${NC}"
    echo -e "${PURPLE}│              Version $VERSION             │${NC}"
    echo -e "${PURPLE}╰─────────────────────────────────────────╯${NC}"
    echo ""
}

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_command() {
    echo -e "${CYAN}$ $1${NC}"
}

# Help function
show_help() {
    print_header
    echo "USAGE:"
    echo "  $TOOL_NAME [COMMAND] [OPTIONS]"
    echo ""
    echo "COMMANDS:"
    echo "  extract     Extract Flutter app code to a generator script"
    echo "  install     Install this CLI tool globally"
    echo "  uninstall   Remove this CLI tool from system"
    echo "  version     Show version information"
    echo "  help        Show this help message"
    echo ""
    echo "EXTRACT OPTIONS:"
    echo "  -s, --source DIR        Source directory (default: ./lib)"
    echo "  -o, --output FILE       Output script name (default: generate_flutter_app.sh)"
    echo "  -n, --name NAME         Default app name in generator (default: extracted_flutter_app)"
    echo "  -p, --pubspec           Include pubspec.yaml in extraction"
    echo "  -a, --assets            Include assets folder in extraction"
    echo "  -f, --force             Overwrite existing output file"
    echo "  -v, --verbose           Verbose output"
    echo ""
    echo "EXAMPLES:"
    echo "  $TOOL_NAME extract                          # Basic extraction"
    echo "  $TOOL_NAME extract -p -a                    # Include pubspec and assets"
    echo "  $TOOL_NAME extract -o my_app_backup.sh      # Custom output name"
    echo "  $TOOL_NAME extract -s ./custom_lib -n MyApp # Custom source and app name"
    echo ""
}

# Version function
show_version() {
    print_header
    echo "Flutter Code Extractor CLI v$VERSION"
    echo "A tool to extract and recreate Flutter applications"
    echo ""
}

# Install function
install_cli() {
    print_header
    print_status "Installing Flutter Code Extractor CLI..."
    
    # Determine installation directory
    if [[ ":$PATH:" == *":$HOME/.local/bin:"* ]]; then
        INSTALL_DIR="$HOME/.local/bin"
    elif [[ ":$PATH:" == *":/usr/local/bin:"* ]]; then
        INSTALL_DIR="/usr/local/bin"
        NEED_SUDO=true
    else
        INSTALL_DIR="$HOME/.local/bin"
        mkdir -p "$INSTALL_DIR"
        print_warning "Created $INSTALL_DIR - you may need to add it to your PATH"
        echo "Add this to your ~/.bashrc or ~/.zshrc:"
        print_command "export PATH=\"\$HOME/.local/bin:\$PATH\""
    fi
    
    # Copy script to installation directory
    if [ "$NEED_SUDO" = true ]; then
        sudo cp "$0" "$INSTALL_DIR/$TOOL_NAME"
        sudo chmod +x "$INSTALL_DIR/$TOOL_NAME"
    else
        cp "$0" "$INSTALL_DIR/$TOOL_NAME"
        chmod +x "$INSTALL_DIR/$TOOL_NAME"
    fi
    
    print_success "Installed to: $INSTALL_DIR/$TOOL_NAME"
    print_status "You can now use '$TOOL_NAME' from anywhere!"
    
    # Verify installation
    if command -v "$TOOL_NAME" &> /dev/null; then
        print_success "Installation verified - '$TOOL_NAME' is available in PATH"
    else
        print_warning "Installation complete but '$TOOL_NAME' not found in PATH"
        print_status "You may need to restart your terminal or source your shell config"
    fi
}

# Uninstall function
uninstall_cli() {
    print_header
    print_status "Uninstalling Flutter Code Extractor CLI..."
    
    # Find and remove the installed script
    for dir in "$HOME/.local/bin" "/usr/local/bin"; do
        if [ -f "$dir/$TOOL_NAME" ]; then
            if [ "$dir" = "/usr/local/bin" ]; then
                sudo rm "$dir/$TOOL_NAME"
            else
                rm "$dir/$TOOL_NAME"
            fi
            print_success "Removed from: $dir/$TOOL_NAME"
            return 0
        fi
    done
    
    print_warning "CLI tool not found in standard installation directories"
}

# Function to escape content for bash heredoc
escape_for_heredoc() {
    sed "s/'/'\\\\''/g"
}

# Main extraction function
extract_flutter_app() {
    local source_dir="./lib"
    local output_script="generate_flutter_app.sh"
    local app_name="extracted_flutter_app"
    local include_pubspec=false
    local include_assets=false
    local force_overwrite=false
    local verbose=false
    
    # Parse options
    while [[ $# -gt 0 ]]; do
        case $1 in
            -s|--source)
                source_dir="$2"
                shift 2
                ;;
            -o|--output)
                output_script="$2"
                shift 2
                ;;
            -n|--name)
                app_name="$2"
                shift 2
                ;;
            -p|--pubspec)
                include_pubspec=true
                shift
                ;;
            -a|--assets)
                include_assets=true
                shift
                ;;
            -f|--force)
                force_overwrite=true
                shift
                ;;
            -v|--verbose)
                verbose=true
                shift
                ;;
            *)
                print_error "Unknown option: $1"
                exit 1
                ;;
        esac
    done
    
    # Check if output file exists
    if [ -f "$output_script" ] && [ "$force_overwrite" != true ]; then
        print_error "Output file '$output_script' already exists!"
        print_status "Use -f or --force to overwrite"
        exit 1
    fi
    
    # Check if source directory exists
    if [ ! -d "$source_dir" ]; then
        print_error "Source directory '$source_dir' not found!"
        print_status "Use -s or --source to specify a different directory"
        exit 1
    fi
    
    print_header
    print_status "Extracting Flutter app code..."
    [ "$verbose" = true ] && print_status "Source directory: $source_dir"
    [ "$verbose" = true ] && print_status "Output script: $output_script"
    [ "$verbose" = true ] && print_status "Default app name: $app_name"
    
    # Start creating the generator script
    cat > "$output_script" << 'GENERATOR_SCRIPT_START'
#!/bin/bash

# Generated Flutter App Recreation Script
# Created by Flutter Code Extractor CLI

set -e

# Colors and functions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

print_header() {
    echo -e "${PURPLE}╭─────────────────────────────────────────╮${NC}"
    echo -e "${PURPLE}│      Flutter App Generator Script      │${NC}"
    echo -e "${PURPLE}╰─────────────────────────────────────────╯${NC}"
    echo ""
}

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Show help
show_help() {
    echo "USAGE: $0 [app_name] [options]"
    echo ""
    echo "OPTIONS:"
    echo "  -h, --help      Show this help"
    echo "  --skip-deps     Skip flutter pub get"
    echo "  --skip-doctor   Skip flutter doctor"
    echo ""
    echo "EXAMPLE:"
    echo "  $0 my_awesome_app"
    echo ""
}

# Parse arguments
APP_NAME=""
SKIP_DEPS=false
SKIP_DOCTOR=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        --skip-deps)
            SKIP_DEPS=true
            shift
            ;;
        --skip-doctor)
            SKIP_DOCTOR=true
            shift
            ;;
        -*)
            print_error "Unknown option: $1"
            show_help
            exit 1
            ;;
        *)
            if [ -z "$APP_NAME" ]; then
                APP_NAME="$1"
            else
                print_error "Multiple app names specified"
                exit 1
            fi
            shift
            ;;
    esac
done

GENERATOR_SCRIPT_START

    # Add default app name to generator
    echo "# Set default app name if not provided" >> "$output_script"
    echo "APP_NAME=\"\${APP_NAME:-$app_name}\"" >> "$output_script"
    echo "" >> "$output_script"
    
    # Add main generation logic
    cat >> "$output_script" << 'GENERATOR_MAIN_START'
print_header
print_status "Creating Flutter app: $APP_NAME"

# Check if Flutter is installed
if ! command -v flutter &> /dev/null; then
    print_error "Flutter is not installed or not in PATH"
    print_error "Please install Flutter: https://flutter.dev/docs/get-started/install"
    exit 1
fi

# Check if directory already exists
if [ -d "$APP_NAME" ]; then
    print_error "Directory '$APP_NAME' already exists!"
    exit 1
fi

# Create new Flutter app
print_status "Creating new Flutter project..."
flutter create "$APP_NAME" --quiet
cd "$APP_NAME"

# Remove default files
rm -f lib/main.dart
[ -d "test" ] && rm -rf test/*

print_status "Generating app structure and code..."

GENERATOR_MAIN_START

    # Process pubspec.yaml if requested
    if [ "$include_pubspec" = true ] && [ -f "pubspec.yaml" ]; then
        [ "$verbose" = true ] && print_status "Including pubspec.yaml"
        echo "# Replace pubspec.yaml" >> "$output_script"
        echo "cat > 'pubspec.yaml' << 'PUBSPEC_EOF'" >> "$output_script"
        cat "pubspec.yaml" >> "$output_script"
        echo "" >> "$output_script"
        echo "PUBSPEC_EOF" >> "$output_script"
        echo "print_status \"Updated pubspec.yaml\"" >> "$output_script"
        echo "" >> "$output_script"
    fi
    
    # Process Dart files
    dart_files_count=0
    while IFS= read -r -d '' file; do
        local relative_path="${file#$source_dir/}"
        local dir_path=$(dirname "$relative_path")
        
        [ "$verbose" = true ] && print_status "Processing: $relative_path"
        
        # Create directory if needed
        if [ "$dir_path" != "." ]; then
            echo "mkdir -p \"lib/$dir_path\"" >> "$output_script"
        fi
        
        # Add file content
        echo "cat > 'lib/$relative_path' << 'DART_EOF'" >> "$output_script"
        cat "$file" | escape_for_heredoc >> "$output_script"
        echo "" >> "$output_script"
        echo "DART_EOF" >> "$output_script"
        echo "print_status \"Created: lib/$relative_path\"" >> "$output_script"
        echo "" >> "$output_script"
        
        ((dart_files_count++))
    done < <(find "$source_dir" -name "*.dart" -type f -print0)
    
    # Process assets if requested
    if [ "$include_assets" = true ] && [ -d "assets" ]; then
        [ "$verbose" = true ] && print_status "Including assets folder"
        echo "# Copy assets" >> "$output_script"
        echo "if [ -d 'assets' ]; then rm -rf assets; fi" >> "$output_script"
        echo "mkdir -p assets" >> "$output_script"
        
        while IFS= read -r -d '' file; do
            local relative_path="${file#./assets/}"
            local dir_path=$(dirname "$relative_path")
            
            if [ "$dir_path" != "." ]; then
                echo "mkdir -p \"assets/$dir_path\"" >> "$output_script"
            fi
            
            echo "base64 -d << 'ASSET_EOF' > 'assets/$relative_path'" >> "$output_script"
            base64 "$file" >> "$output_script"
            echo "ASSET_EOF" >> "$output_script"
            echo "print_status \"Created: assets/$relative_path\"" >> "$output_script"
        done < <(find "assets" -type f -print0 2>/dev/null || true)
    fi
    
    # Add final steps
    cat >> "$output_script" << 'GENERATOR_END'

# Final steps
if [ "$SKIP_DEPS" != true ]; then
    print_status "Getting Flutter packages..."
    flutter pub get
fi

if [ "$SKIP_DOCTOR" != true ]; then
    print_status "Running Flutter doctor..."
    flutter doctor
fi

print_success "Flutter app '$APP_NAME' created successfully!"
print_status "To run the app:"
print_status "  cd $APP_NAME"
print_status "  flutter run"
echo ""

GENERATOR_END

    chmod +x "$output_script"
    
    echo ""
    print_success "Extraction completed!"
    print_status "Found and processed $dart_files_count Dart files"
    [ "$include_pubspec" = true ] && print_status "Included pubspec.yaml"
    [ "$include_assets" = true ] && print_status "Included assets folder"
    print_success "Generator script created: $output_script"
    echo ""
    print_status "To recreate the Flutter app:"
    print_command "./$output_script [app_name]"
    echo ""
}

# Main command dispatcher
case "${1:-help}" in
    extract)
        shift
        extract_flutter_app "$@"
        ;;
    install)
        install_cli
        ;;
    uninstall)
        uninstall_cli
        ;;
    version)
        show_version
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        print_error "Unknown command: $1"
        echo ""
        show_help
        exit 1
        ;;
esac
