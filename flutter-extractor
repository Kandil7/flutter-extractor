#!/usr/bin/env bash
################################################################################
# Flutter Code Extractor CLI v2.1.0
# https://github.com/Kandil7/flutter-extractor
#
# A global CLI tool to extract and recreate Flutter applications with
# feature-based architecture.
################################################################################
set -euo pipefail

VERSION="2.1.0"
TOOL_NAME="flutter-extractor"

# ── Color palette -----------------------------------------------------------
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly NC='\033[0m'

# ── Utility helpers ----------------------------------------------------------
print_header() {
  echo -e "${PURPLE}╭─────────────────────────────────────────╮${NC}"
  echo -e "${PURPLE}│         Flutter Code Extractor         │${NC}"
  echo -e "${PURPLE}│              Version $VERSION             │${NC}"
  echo -e "${PURPLE}╰─────────────────────────────────────────╯${NC}"
  echo
}

print_status()   { echo -e "${BLUE}[INFO]${NC} $*"; }
print_success()  { echo -e "${GREEN}[SUCCESS]${NC} $*"; }
print_warning()  { echo -e "${YELLOW}[WARNING]${NC} $*"; }
print_error()    { echo -e "${RED}[ERROR]${NC} $*"; }
print_command()  { echo -e "${CYAN}$ $*${NC}"; }
print_verbose()  { [[ "${VERBOSE:-false}" == "true" ]] && echo -e "${CYAN}[VERBOSE]${NC} $*" || true; }

# ── Help --------------------------------------------------------------------
show_help() {
  print_header
  cat <<EOF
USAGE:
  $TOOL_NAME [COMMAND] [OPTIONS]

COMMANDS:
  extract     Extract Flutter app code to generator scripts
  install     Install this CLI tool globally
  uninstall   Remove this CLI tool from system
  version     Show version information
  help        Show this help message

EXTRACT OPTIONS:
  -s, --source DIR        Source directory (default: current directory)
  -o, --output DIR        Output directory for generated scripts (default: flutter_extract)
  -n, --name NAME         Default app name in generator (default: extracted_flutter_app)
  -p, --pubspec           Include pubspec.yaml in extraction
  -a, --assets            Include assets folder in extraction
  -c, --config            Include analysis_options.yaml and .gitignore
  -t, --tests             Include test files in extraction
  -f, --force             Overwrite existing output files
  -v, --verbose           Verbose output
  --features              Enable feature-based extraction (default)
  --monolith             Create single monolithic script instead of features
  --recreate             Force recreation mode instead of update mode
  --feature-pattern GLOB  Pattern to identify features (default: 'features/*')
  --exclude PATTERN      Exclude files matching pattern (repeatable)

EXAMPLES:
  $TOOL_NAME extract
  $TOOL_NAME extract -p -a -c -t
  $TOOL_NAME extract --recreate
  $TOOL_NAME extract --monolith
  $TOOL_NAME extract -o my_backup --force
  $TOOL_NAME extract --exclude '*.generated.dart'
EOF
}

# ── Version -----------------------------------------------------------------
show_version() {
  print_header
  echo "Flutter Code Extractor CLI v$VERSION"
  echo "A tool to extract and recreate Flutter applications"
  echo "Features: Modular extraction, incremental updates, feature-based architecture"
  echo
}

# ── Command existence -------------------------------------------------------
command_exists() { command -v "$1" >/dev/null 2>&1; }

# ── Install / Uninstall -----------------------------------------------------
install_cli() {
  print_header
  print_status "Installing Flutter Code Extractor CLI..."

  local install_dir="" need_sudo=false

  if [[ -d "$HOME/.local/bin" ]] && [[ ":$PATH:" == *":$HOME/.local/bin:"* ]]; then
    install_dir="$HOME/.local/bin"
  elif [[ -d "/usr/local/bin" ]] && [[ ":$PATH:" == *":/usr/local/bin:"* ]]; then
    install_dir="/usr/local/bin"
    need_sudo=true
  else
    install_dir="$HOME/.local/bin"
    mkdir -p "$install_dir"
    print_warning "Created $install_dir"
    print_warning "Add this to your ~/.bashrc or ~/.zshrc:"
    print_command "export PATH=\"\$HOME/.local/bin:\$PATH\""
    echo
  fi

  local target="$install_dir/$TOOL_NAME"

  if [[ "$need_sudo" == "true" ]]; then
    if ! command_exists sudo; then
      print_error "sudo is required to install to /usr/local/bin"
      exit 1
    fi
    sudo cp "$0" "$target"
    sudo chmod +x "$target"
  else
    cp "$0" "$target"
    chmod +x "$target"
  fi

  print_success "Installed to: $target"

  if command_exists "$TOOL_NAME"; then
    print_success "Installation verified - '$TOOL_NAME' is available in PATH"
  else
    print_warning "Installation complete but '$TOOL_NAME' not found in PATH"
    print_status "You may need to restart your terminal or run: source ~/.bashrc"
  fi
}

uninstall_cli() {
  print_header
  print_status "Uninstalling Flutter Code Extractor CLI..."

  local found=false
  for dir in "$HOME/.local/bin" "/usr/local/bin"; do
    local target="$dir/$TOOL_NAME"
    if [[ -f "$target" ]]; then
      if [[ "$dir" == "/usr/local/bin" ]]; then
        if command_exists sudo; then sudo rm "$target"; else print_error "sudo required to remove $target"; fi
      else
        rm "$target"
      fi
      print_success "Removed from: $target"
      found=true
    fi
  done

  [[ "$found" == "false" ]] && print_warning "CLI tool not found in standard installation directories"
}

# ── Text helpers ------------------------------------------------------------
escape_for_heredoc() {
  sed 's/\\/\\\\/g' | sed "s/'/'\\\\''/g" | sed 's/`/\\`/g'
}

validate_flutter_project() {
  local dir="$1"
  [[ -f "$dir/pubspec.yaml" ]] && grep -q "flutter:" "$dir/pubspec.yaml" 2>/dev/null && return 0
  [[ -d "$dir/lib" ]] && return 0
  return 1
}

get_relative_path() { echo "${1#$2/}"; }

should_exclude_file() {
  local file="$1"; shift
  for pattern in "$@"; do
    [[ "$file" == $pattern ]] && return 0
  done
  return 1
}

extract_feature_name() {
  local file_path="$1" pattern="${2:-features/*}"
  local clean="${file_path#lib/}"

  if [[ "$clean" == ${pattern%/*}/* ]]; then
    echo "${clean#${pattern%/*}/}" | cut -d'/' -f1
    return
  fi

  case "$clean" in
    features/*) echo "${clean#features/}" | cut -d'/' -f1 ;;
    modules/*)  echo "${clean#modules/}"  | cut -d'/' -f1 ;;
    screens/*)  echo "${clean#screens/}"  | cut -d'/' -f1 ;;
    pages/*)    echo "${clean#pages/}"    | cut -d'/' -f1 ;;
    widgets/*)  echo "widgets" ;;
    components/*) echo "components" ;;
    services/*) echo "services" ;;
    models/*)   echo "models" ;;
    utils/*)    echo "utils" ;;
    *)          echo "core" ;;
  esac
}

# ── Script generators -------------------------------------------------------
create_feature_script() {
  local feature="$1" out="$2" update="$3"; shift 3
  local script="$out/features/${feature}_feature.sh"
  mkdir -p "$out/features"
  {
    echo "#!/bin/bash"
    echo "# ${feature^} Feature Generator"
    echo "# Auto-generated by Flutter Code Extractor v$VERSION"
    echo "set -euo pipefail"
    echo "GREEN='\\033[0;32m'; BLUE='\\033[0;34m'; YELLOW='\\033[1;33m'; NC='\\033[0m';"
    echo "print_status(){ echo -e \"\\${BLUE}[${feature^^}]\\${NC} \$1\"; }"
    echo "print_success(){ echo -e \"\\${GREEN}[${feature^^}]\\${NC} \$1\"; }"
    echo "print_warning(){ echo -e \"\\${YELLOW}[${feature^^}]\\${NC} \$1\"; }"
    echo "generate_${feature}_feature(){"
    echo "  local app_dir=\"\$1\" update_mode=\"\${2:-$update}\";"
    echo "  print_status \"Generating $feature feature...\";"
    echo "  [[ -d \"\$app_dir\" ]] || { echo \"Error: Directory '\$app_dir' does not exist\"; exit 1; };"
    echo "  cd \"\$app_dir\";"
  } > "$script"

  for entry in "$@"; do
    [[ -z "$entry" ]] && continue
    local path="${entry%%|*}" content="${entry#*|}"
    local dir
    dir=$(dirname "$path")
    cat >> "$script" <<EOF

  # $path
  if [[ "\$update_mode" == "true" && -f "$path" ]]; then
    print_warning "Skipping existing file: $path (update mode)"
  else
EOF
    [[ "$dir" != "." ]] && echo "    mkdir -p \"$dir\"" >> "$script"
    cat >> "$script" <<EOF
    cat > '$path' << 'EOF_FILE'
$content
EOF_FILE
    print_status "Created: $path"
  fi
EOF
  done

  cat >> "$script" <<'EOF'
  print_success "$feature feature generated successfully!"
}
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  [[ -z "${1:-}" ]] && { echo "Usage: $0 <app_directory> [update_mode]"; exit 1; }
  generate_${feature}_feature "$1" "${2:-true}"
fi
EOF
  chmod +x "$script"
}

create_config_script() {
  local name="$1" out="$2" content="$3" file="$4"
  local script="$out/config/${name}_config.sh"
  mkdir -p "$out/config"
  {
    echo "#!/bin/bash"
    echo "# ${name^} Configuration"
    echo "# Auto-generated by Flutter Code Extractor v$VERSION"
    echo "set -euo pipefail"
    echo "GREEN='\\033[0;32m'; BLUE='\\033[0;34m'; YELLOW='\\033[1;33m'; NC='\\033[0m';"
    echo "print_status(){ echo -e \"\\${BLUE}[CONFIG]\\${NC} \$1\"; }"
    echo "print_success(){ echo -e \"\\${GREEN}[CONFIG]\\${NC} \$1\"; }"
    echo "print_warning(){ echo -e \"\\${YELLOW}[CONFIG]\\${NC} \$1\"; }"
    echo "apply_${name}_config(){"
    echo "  local app_dir=\"\$1\" update_mode=\"\${2:-true}\";"
    echo "  [[ -d \"\$app_dir\" ]] || { echo \"Error: Directory '\$app_dir' does not exist\"; exit 1; };"
    echo "  cd \"\$app_dir\";"
    echo "  if [[ \"\$update_mode\" == \"true\" && -f \"$file\" ]]; then"
    echo "    print_warning \"Skipping existing file: $file (update mode)\";"
    echo "  else"
    echo "    cat > '$file' << 'EOF_FILE'"
    echo "$content"
    echo "EOF_FILE"
    echo "    print_success \"Applied $name configuration: $file\";"
    echo "  fi"
    echo "}"
    echo '[[ "${BASH_SOURCE[0]}" == "${0}" ]] && apply_'"${name}"'_config "${1:-}" "${2:-true}"'
  } > "$script"
  chmod +x "$script"
}

create_assets_script() {
  local out="$1" src="$2"; shift 2
  local script="$out/config/assets_config.sh"
  mkdir -p "$out/config"
  cat > "$script" <<'EOF'
#!/bin/bash
# Assets Configuration
# Auto-generated by Flutter Code Extractor v$VERSION
set -euo pipefail
GREEN='\033[0;32m'; BLUE='\033[0;34m'; YELLOW='\033[1;33m'; NC='\033[0m';
print_status(){ echo -e "${BLUE}[ASSETS]${NC} $1"; }
print_success(){ echo -e "${GREEN}[ASSETS]${NC} $1"; }
print_warning(){ echo -e "${YELLOW}[ASSETS]${NC} $1"; }
apply_assets_config(){
  local app_dir="$1" update_mode="${2:-true}"
  [[ -d "$app_dir" ]] || { echo "Error: Directory '$app_dir' does not exist"; exit 1; }
  cd "$app_dir"
  [[ "$update_mode" != "true" && -d "assets" ]] && rm -rf assets
  mkdir -p assets
EOF

  local count=0
  if [[ -d "$src/assets" ]]; then
    while IFS= read -r -d '' file; do
      local rel
      rel=$(get_relative_path "$file" "$src/assets")
      if should_exclude_file "$rel" "$@"; then
        print_verbose "Excluding asset: $rel"
        continue
      fi
      local dir
      dir=$(dirname "$rel")
      cat >> "$script" <<EOF

  # assets/$rel
  if [[ "\$update_mode" == "true" && -f "assets/$rel" ]]; then
    print_warning "Skipping existing asset: assets/$rel (update mode)"
  else
EOF
      [[ "$dir" != "." ]] && echo "    mkdir -p \"assets/$dir\"" >> "$script"
      if file "$file" | grep -q "text\|ASCII"; then
        echo "    cat > 'assets/$rel' << 'EOF_ASSET'" >> "$script"
        escape_for_heredoc < "$file" >> "$script"
        echo "EOF_ASSET" >> "$script"
      else
        echo "    base64 -d << 'EOF_ASSET' > 'assets/$rel'" >> "$script"
        base64 < "$file" >> "$script"
        echo "EOF_ASSET" >> "$script"
      fi
      echo "    print_status \"Created asset: assets/$rel\"" >> "$script"
      echo "  fi" >> "$script"
      ((count++))
    done < <(find "$src/assets" -type f -print0 2>/dev/null || true)
    echo "  print_success \"Processed $count asset files\"" >> "$script"
  fi

  cat >> "$script" <<'EOF'
}
[[ "${BASH_SOURCE[0]}" == "${0}" ]] && apply_assets_config "${1:-}" "${2:-true}"
EOF
  chmod +x "$script"
}

create_main_builder() {
  local out="$1" app_name="$2" update_mode="$3"
  local script="$out/flutter_app_builder.sh"
  local features=() configs=()

  [[ -d "$out/features" ]] && \
    while IFS= read -r -d '' f; do features+=("$(basename "$f")"); done < \
    <(find "$out/features" -name "*_feature.sh" -print0 2>/dev/null || true)

  [[ -d "$out/config" ]] && \
    while IFS= read -r -d '' f; do configs+=("$(basename "$f")"); done < \
    <(find "$out/config" -name "*_config.sh" -print0 2>/dev/null || true)

  cat > "$script" <<EOF
#!/bin/bash
# Flutter App Builder - Main Script
# Auto-generated by Flutter Code Extractor v$VERSION
set -euo pipefail
RED='\\033[0;31m'; GREEN='\\033[0;32m'; YELLOW='\\033[1;33m'; BLUE='\\033[0;34m'; PURPLE='\\033[0;35m'; CYAN='\\033[0;36m'; NC='\\033[0m';
print_header(){
  echo -e "\\${PURPLE}╭─────────────────────────────────────────╮\\${NC}"
  echo -e "\\${PURPLE}│      Flutter App Builder Script        │\\${NC}"
  echo -e "\\${PURPLE}│         Feature-Based Architecture     │\\${NC}"
  echo -e "\\${PURPLE}╰─────────────────────────────────────────╯\\${NC}"; echo;
}
print_status(){ echo -e "\\${BLUE}[MAIN]\\${NC} \\$1"; }
print_success(){ echo -e "\\${GREEN}[MAIN]\\${NC} \\$1"; }
print_error(){ echo -e "\\${RED}[MAIN]\\${NC} \\$1"; }
print_warning(){ echo -e "\\${YELLOW}[MAIN]\\${NC} \\$1"; }

show_help(){
  echo "USAGE: \\$0 [app_name] [options]"
  echo "OPTIONS:"
  echo "  -h, --help          Show this help"
  echo "  --update            Update mode (default)"
  echo "  --recreate          Recreate mode"
  echo "  --skip-deps         Skip flutter pub get"
  echo "  --skip-doctor       Skip flutter doctor"
  echo "  --clean             Remove existing directory"
  echo "  --features-only     Only generate features"
  echo "  --config-only       Only apply configuration"
  echo "  --list-features     List features and exit"
  echo "EXAMPLES:"
  echo "  \\$0 my_app"
  echo "  \\$0 my_app --recreate --clean"
  echo "AVAILABLE FEATURES:"
EOF

  for f in "${features[@]}"; do
    local feat="${f%_feature.sh}"
    echo "  echo \"  - $feat\"" >> "$script"
  done

  cat >> "$script" <<'EOF'
  exit 0
}

APP_NAME=""
UPDATE_MODE="true"
SKIP_DEPS=false
SKIP_DOCTOR=false
CLEAN=false
FEAT_ONLY=false
CONF_ONLY=false
LIST=false

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help) show_help; exit 0 ;;
    --update) UPDATE_MODE="true"; shift ;;
    --recreate) UPDATE_MODE="false"; shift ;;
    --skip-deps) SKIP_DEPS=true; shift ;;
    --skip-doctor) SKIP_DOCTOR=true; shift ;;
    --clean) CLEAN=true; shift ;;
    --features-only) FEAT_ONLY=true; shift ;;
    --config-only) CONF_ONLY=true; shift ;;
    --list-features) LIST=true; shift ;;
    -*) print_error "Unknown option: $1"; show_help; exit 1 ;;
    *)
      [[ -z "$APP_NAME" ]] && APP_NAME="$1" || { print_error "Multiple app names"; exit 1; }
      shift
      ;;
  esac
done

[[ "$LIST" == "true" ]] && show_help

APP_NAME="${APP_NAME:-$app_name}"
print_header

if [[ ! "$APP_NAME" =~ ^[a-z][a-z0-9_]*$ ]]; then
  print_error "Invalid app name: $APP_NAME"
  print_error "Must be lowercase, start with letter, contain letters/numbers/_"
  exit 1
fi

if ! command -v flutter &>/dev/null; then
  print_error "Flutter not found. Install from https://flutter.dev/docs/get-started/install"
  exit 1
fi

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

print_status "Building Flutter app: $APP_NAME"
[[ "$UPDATE_MODE" == "true" ]] && print_status "Mode: Update (preserve existing)" \
                                      || print_status "Mode: Recreate (overwrite)"

if [[ -d "$APP_NAME" ]]; then
  if [[ "$CLEAN" == "true" ]]; then
    print_warning "Removing existing directory: $APP_NAME"
    rm -rf "$APP_NAME"
    UPDATE_MODE="false"
  elif [[ "$UPDATE_MODE" == "false" ]]; then
    print_error "Directory '$APP_NAME' already exists! Use --clean or --update"
    exit 1
  else
    print_status "Updating existing app: $APP_NAME"
  fi
else
  UPDATE_MODE="false"
fi

if [[ ! -d "$APP_NAME" ]]; then
  print_status "Creating new Flutter project..."
  flutter create "$APP_NAME" --quiet || { print_error "flutter create failed"; exit 1; }
  rm -f "$APP_NAME/lib/main.dart"
  [[ -d "$APP_NAME/test" ]] && rm -rf "$APP_NAME/test"/*
fi

APP_DIR="$(cd "$APP_NAME" && pwd)"

if [[ "$FEAT_ONLY" != "true" ]]; then
  print_status "Applying configurations..."
  for c in ${configs[*]:-}; do
    [[ -f "$SCRIPT_DIR/config/$c" ]] && { source "$SCRIPT_DIR/config/$c"; "apply_${c%_config.sh}_config" "$APP_DIR" "$UPDATE_MODE"; }
  done
fi

if [[ "$CONF_ONLY" != "true" ]]; then
  print_status "Generating features..."
  for f in ${features[*]:-}; do
    [[ -f "$SCRIPT_DIR/features/$f" ]] && { source "$SCRIPT_DIR/features/$f"; "generate_${f%_feature.sh}_feature" "$APP_DIR" "$UPDATE_MODE"; }
  done
fi

if [[ "$SKIP_DEPS" != "true" ]]; then
  print_status "Running flutter pub get..."
  cd "$APP_DIR" && flutter pub get || print_warning "flutter pub get failed"
fi

if [[ "$SKIP_DOCTOR" != "true" ]]; then
  print_status "Running flutter doctor..."
  flutter doctor || print_warning "Flutter doctor reported issues"
fi

print_success "Flutter app '$APP_NAME' built successfully!"
print_status "Location: $APP_DIR"
print_status "To run: cd $APP_NAME && flutter run"
EOF
  chmod +x "$script"
}

create_readme() {
  local out="$1" app_name="$2" stats="$3"
  local features=() configs=()
  [[ -d "$out/features" ]] && \
    while IFS= read -r -d '' f; do features+=("$(basename "$f" _feature.sh)"); done < \
    <(find "$out/features" -name "*_feature.sh" -print0 2>/dev/null || true)
  [[ -d "$out/config" ]] && \
    while IFS= read -r -d '' f; do configs+=("$(basename "$f" _config.sh)"); done < \
    <(find "$out/config" -name "*_config.sh" -print0 2>/dev/null || true)

  cat > "$out/README.md" <<EOF
# Flutter App Extractor Bundle

Generated by **Flutter Code Extractor v$VERSION**.

## Quick Start
\`\`\`bash
./flutter_app_builder.sh my_app
\`\`\`

## Structure
\`\`\`
$(basename "$out")/
├── flutter_app_builder.sh
├── features/            # Feature modules
├── config/              # Configuration scripts
└── README.md
\`\`\`

## Available Features
$(printf -- "- %s\n" "${features[@]}")

## Configuration Modules
$(printf -- "- %s\n" "${configs[@]}")

## Options
- \`--update\` (default) – safe incremental update
- \`--recreate\` – overwrite existing files
- \`--clean\` – remove directory before creation
- \`--features-only\` / \`--config-only\`

## Statistics
$stats
EOF
  print_success "README.md created at: $out/README.md"
}

# ── Extract command ---------------------------------------------------------
cmd_extract() {
  local src="." out="flutter_extract" app_name="extracted_flutter_app"
  local pubspec=false assets=false config=false tests=false force=false monolith=false
  local recreate=false update_mode="true"
  local feature_pattern="features/*"
  local -a exclude_patterns=()

  while [[ $# -gt 0 ]]; do
    case $1 in
      -s|--source) src="$2"; shift 2 ;;
      -o|--output) out="$2"; shift 2 ;;
      -n|--name) app_name="$2"; shift 2 ;;
      -p|--pubspec) pubspec=true; shift ;;
      -a|--assets) assets=true; shift ;;
      -c|--config) config=true; shift ;;
      -t|--tests) tests=true; shift ;;
      -f|--force) force=true; shift ;;
      -v|--verbose) VERBOSE=true; shift ;;
      --features) monolith=false; shift ;;
      --monolith) monolith=true; shift ;;
      --recreate) recreate=true; update_mode="false"; shift ;;
      --feature-pattern) feature_pattern="$2"; shift 2 ;;
      --exclude) exclude_patterns+=("$2"); shift 2 ;;
      *) print_error "Unknown option: $1"; exit 1 ;;
    esac
  done

  [[ "$recreate" == "true" ]] && update_mode="false"

  [[ -d "$src" ]] || { print_error "Source directory does not exist: $src"; exit 1; }
  validate_flutter_project "$src" || { print_error "Not a Flutter project: $src"; exit 1; }

  if [[ -d "$out" ]]; then
    [[ "$force" == "true" ]] && { rm -rf "$out"; print_warning "Removed existing output directory: $out"; } \
      || { print_error "Output directory already exists: $out. Use --force to overwrite"; exit 1; }
  fi

  mkdir -p "$out/features" "$out/config"

  print_header
  print_status "Extracting Flutter project from: $src"
  print_status "Output directory: $out"
  print_status "App name in generator: $app_name"
  [[ "$update_mode" == "true" ]] && print_status "Mode: Update (preserve existing files)" \
    || print_status "Mode: Recreate (overwrite all files)"

  # Collect lib files (bash 3.2-safe)
local -a feature_files_order feature_files_payload
local total_files=0 total_size=0

if [[ -d "$src/lib" ]]; then
  while IFS= read -r -d '' file; do
    rel=$(get_relative_path "$file" "$src")
    should_exclude_file "$rel" "${exclude_patterns[@]}" && continue
    feature=$(extract_feature_name "$rel" "$feature_pattern")
    payload="$rel|$(cat "$file")"

    feature_files_order+=("$feature")
    feature_files_payload+=("$payload")

    ((total_files++))
    total_size=$(("$total_size" + $(stat -c%s "$file" 2>/dev/null || stat -f%z "$file")))
  done < <(find "$src/lib" -type f -name "*.dart" -print0)
fi

  # Create feature scripts
  for feature in "${!feature_files[@]}"; do
    IFS=$'\n' read -r -d '' -a entries <<<"${feature_files[$feature]}"
    create_feature_script "$feature" "$out" "$update_mode" "${entries[@]}"
  done

  # Create monolith script if requested
  if [[ "$monolith" == "true" ]]; then
    print_status "Generating monolithic script (features merged)..."
    local monolith_script="$out/generate_flutter_app.sh"
    {
      echo "#!/bin/bash"
      echo "# Monolithic Flutter App Generator"
      echo "set -euo pipefail"
      echo "GREEN='\\033[0;32m'; BLUE='\\033[0;34m'; YELLOW='\\033[1;33m'; NC='\\033[0m';"
      echo "print_status(){ echo -e \"\\${BLUE}[MONOLITH]\\${NC} \\$1\"; }"
      echo "print_success(){ echo -e \"\\${GREEN}[MONOLITH]\\${NC} \\$1\"; }"
      echo "generate_app(){"
      echo "  local app_dir=\"\\$1\" update_mode=\"\\${2:-$update_mode}\""
      echo "  [[ -d \"\\$app_dir\" ]] || { echo \"Error: Directory '\\$app_dir' does not exist\"; exit 1; }"
      echo "  cd \"\\$app_dir\""
    } > "$monolith_script"

    for feature in "${!feature_files[@]}"; do
      IFS=$'\n' read -r -d '' -a entries <<<"${feature_files[$feature]}"
      for entry in "${entries[@]}"; do
        [[ -z "$entry" ]] && continue
        local path="${entry%%|*}" content="${entry#*|}"
        local dir
        dir=$(dirname "$path")
        echo "" >> "$monolith_script"
        [[ "$dir" != "." ]] && echo "  mkdir -p \"$dir\"" >> "$monolith_script"
        echo "  cat > '$path' << 'EOF_FILE'" >> "$monolith_script"
        echo "$content" >> "$monolith_script"
        echo "EOF_FILE" >> "$monolith_script"
        echo "  print_status \"Created: $path\"" >> "$monolith_script"
      done
    done

    cat >> "$monolith_script" <<'EOF'
  print_success "Flutter app generated successfully!"
}
[[ "${BASH_SOURCE[0]}" == "${0}" ]] && generate_app "${1:-flutter_app}" "${2:-true}"
EOF
    chmod +x "$monolith_script"
  fi

  # Configs
  [[ "$config" == "true" && -f "$src/analysis_options.yaml" ]] && \
    create_config_script "analysis_options" "$out" "$(cat "$src/analysis_options.yaml")" "analysis_options.yaml"
  [[ "$config" == "true" && -f "$src/.gitignore" ]] && \
    create_config_script "gitignore" "$out" "$(cat "$src/.gitignore")" ".gitignore"
  [[ "$pubspec" == "true" && -f "$src/pubspec.yaml" ]] && \
    create_config_script "pubspec" "$out" "$(cat "$src/pubspec.yaml")" "pubspec.yaml"
  [[ "$assets" == "true" && -d "$src/assets" ]] && \
    create_assets_script "$out" "$src" "${exclude_patterns[@]}"

  # Tests
  if [[ "$tests" == "true" && -d "$src/test" ]]; then
    local test_entries=()
    while IFS= read -r -d '' file; do
      local rel
      rel=$(get_relative_path "$file" "$src")
      should_exclude_file "$rel" "${exclude_patterns[@]}" && continue
      test_entries+=("$rel|$(cat "$file")")
    done < <(find "$src/test" -type f -name "*.dart" -print0)
    [[ ${#test_entries[@]} -gt 0 ]] && \
      create_feature_script "tests" "$out" "$update_mode" "${test_entries[@]}"
  fi

  # Main builder
  [[ "$monolith" == "false" ]] && create_main_builder "$out" "$app_name" "$update_mode"

  # README
  local stats="**Files processed:** $total_files  \n**Total size:** $(numfmt --to=iec "$total_size" 2>/dev/null || echo "$total_size bytes")"
  create_readme "$out" "$app_name" "$stats"

  print_success "Extraction completed successfully!"
  print_status "Generated scripts are in: $out"
  [[ "$monolith" == "false" ]] && print_status "Run ./flutter_app_builder.sh to recreate your app" \
    || print_status "Run ./generate_flutter_app.sh to recreate your app"
}

# ── Main dispatcher ---------------------------------------------------------
main() {
  [[ "$#" -eq 0 ]] && { show_help; exit 0; }
  case "${1:-}" in
    extract) shift; cmd_extract "$@" ;;
    install) install_cli ;;
    uninstall) uninstall_cli ;;
    version) show_version ;;
    help) show_help ;;
    *) print_error "Unknown command: $1"; show_help; exit 1 ;;
  esac
}

main "$@"
