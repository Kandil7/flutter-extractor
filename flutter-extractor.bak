#!/bin/bash

# Enhanced Flutter Code Extractor CLI Tool
# A comprehensive CLI tool to extract, backup, and recreate Flutter apps
# Version: 2.0.0

set -e

VERSION="2.0.0"
TOOL_NAME="flutter-extractor"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

# Configuration
CONFIG_DIR="$HOME/.config/flutter-extractor"
CONFIG_FILE="$CONFIG_DIR/config"
TEMPLATES_DIR="$CONFIG_DIR/templates"
BACKUP_DIR="$HOME/.flutter-backups"

# Functions for colored output
print_header() {
    echo -e "${PURPLE}${BOLD}â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®${NC}"
    echo -e "${PURPLE}${BOLD}â”‚      Enhanced Flutter Extractor        â”‚${NC}"
    echo -e "${PURPLE}${BOLD}â”‚           Version $VERSION              â”‚${NC}"
    echo -e "${PURPLE}${BOLD}â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯${NC}"
    echo ""
}

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_command() {
    echo -e "${CYAN}$ $1${NC}"
}

print_bold() {
    echo -e "${BOLD}$1${NC}"
}

# Progress bar function
show_progress() {
    local current=$1
    local total=$2
    local width=40
    local percentage=$((current * 100 / total))
    local filled=$((current * width / total))
    local empty=$((width - filled))
    
    printf "\r${BLUE}Progress: [${GREEN}"
    printf "%*s" $filled | tr ' ' 'â–ˆ'
    printf "${NC}"
    printf "%*s" $empty | tr ' ' 'â–‘'
    printf "${BLUE}] %d%% (%d/%d)${NC}" $percentage $current $total
}

# Configuration management
init_config() {
    mkdir -p "$CONFIG_DIR" "$TEMPLATES_DIR" "$BACKUP_DIR"
    
    if [ ! -f "$CONFIG_FILE" ]; then
        cat > "$CONFIG_FILE" << 'CONFIG_EOF'
# Flutter Extractor Configuration
DEFAULT_OUTPUT_DIR=./extracts
DEFAULT_BACKUP_DIR=~/.flutter-backups
COMPRESSION_LEVEL=6
AUTO_BACKUP=true
INCLUDE_GENERATED=false
EXCLUDE_PATTERNS=".dart_tool,.packages,build/"
TEMPLATE_ENGINE=basic
CONFIG_EOF
        print_success "Configuration initialized at $CONFIG_FILE"
    fi
}

load_config() {
    init_config
    source "$CONFIG_FILE" 2>/dev/null || true
}

# Template system
create_template() {
    local template_name="$1"
    local source_dir="$2"
    
    if [ -z "$template_name" ] || [ -z "$source_dir" ]; then
        print_error "Usage: create-template <name> <source_directory>"
        return 1
    fi
    
    if [ ! -d "$source_dir" ]; then
        print_error "Source directory not found: $source_dir"
        return 1
    fi
    
    local template_file="$TEMPLATES_DIR/$template_name.template"
    
    print_status "Creating template: $template_name"
    
    cat > "$template_file" << TEMPLATE_EOF
# Flutter App Template: $template_name
# Created: $(date)
TEMPLATE_NAME="$template_name"
SOURCE_DIR="$source_dir"
CREATED_DATE="$(date)"

# Template metadata
TEMPLATE_EOF
    
    # Store directory structure
    echo "STRUCTURE=(" >> "$template_file"
    find "$source_dir" -type d -not -path "*/.*" | sed "s|^$source_dir/||" | sed 's/^/  "/' | sed 's/$/"/' >> "$template_file"
    echo ")" >> "$template_file"
    
    print_success "Template created: $template_name"
}

list_templates() {
    print_header
    print_bold "Available Templates:"
    echo ""
    
    if [ ! -d "$TEMPLATES_DIR" ] || [ -z "$(ls -A "$TEMPLATES_DIR" 2>/dev/null)" ]; then
        print_warning "No templates found"
        return
    fi
    
    for template in "$TEMPLATES_DIR"/*.template; do
        if [ -f "$template" ]; then
            local name=$(basename "$template" .template)
            local created=$(grep "CREATED_DATE=" "$template" | cut -d'"' -f2)
            printf "  ${GREEN}%-20s${NC} Created: %s\n" "$name" "$created"
        fi
    done
}

# Dependency analysis
analyze_dependencies() {
    local pubspec_file="${1:-pubspec.yaml}"
    
    if [ ! -f "$pubspec_file" ]; then
        print_error "pubspec.yaml not found"
        return 1
    fi
    
    print_header
    print_bold "Dependency Analysis:"
    echo ""
    
    # Parse dependencies
    local in_deps=false
    local in_dev_deps=false
    local dep_count=0
    local dev_dep_count=0
    
    while IFS= read -r line; do
        if [[ "$line" =~ ^dependencies: ]]; then
            in_deps=true
            in_dev_deps=false
            continue
        elif [[ "$line" =~ ^dev_dependencies: ]]; then
            in_deps=false
            in_dev_deps=true
            continue
        elif [[ "$line" =~ ^[a-zA-Z] ]] && [ "$in_deps" = false ] && [ "$in_dev_deps" = false ]; then
            in_deps=false
            in_dev_deps=false
            continue
        fi
        
        if [ "$in_deps" = true ] && [[ "$line" =~ ^[[:space:]]+[a-zA-Z0-9_] ]]; then
            local dep=$(echo "$line" | sed 's/^[[:space:]]*//' | cut -d':' -f1)
            echo "  ${GREEN}âœ“${NC} $dep"
            ((dep_count++))
        elif [ "$in_dev_deps" = true ] && [[ "$line" =~ ^[[:space:]]+[a-zA-Z0-9_] ]]; then
            local dev_dep=$(echo "$line" | sed 's/^[[:space:]]*//' | cut -d':' -f1)
            echo "  ${YELLOW}ðŸ”§${NC} $dev_dep (dev)"
            ((dev_dep_count++))
        fi
    done < "$pubspec_file"
    
    echo ""
    print_status "Found $dep_count dependencies and $dev_dep_count dev dependencies"
}

# Code metrics
analyze_code_metrics() {
    local source_dir="${1:-./lib}"
    
    if [ ! -d "$source_dir" ]; then
        print_error "Source directory not found: $source_dir"
        return 1
    fi
    
    print_header
    print_bold "Code Metrics Analysis:"
    echo ""
    
    local dart_files=0
    local total_lines=0
    local total_size=0
    local widget_count=0
    local state_count=0
    
    while IFS= read -r -d '' file; do
        ((dart_files++))
        local lines=$(wc -l < "$file")
        local size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo 0)
        total_lines=$((total_lines + lines))
        total_size=$((total_size + size))
        
        # Count widgets and states
        widget_count=$((widget_count + $(grep -c "extends.*Widget\|extends.*State" "$file" 2>/dev/null || echo 0)))
        state_count=$((state_count + $(grep -c "extends.*State" "$file" 2>/dev/null || echo 0)))
        
    done < <(find "$source_dir" -name "*.dart" -type f -print0)
    
    printf "  ${CYAN}Files:${NC}         %d Dart files\n" $dart_files
    printf "  ${CYAN}Lines:${NC}         %d total lines\n" $total_lines
    printf "  ${CYAN}Size:${NC}          %d bytes (%.1f KB)\n" $total_size $((total_size / 1024))
    printf "  ${CYAN}Widgets:${NC}       %d widget classes\n" $widget_count
    printf "  ${CYAN}Stateful:${NC}      %d stateful widgets\n" $state_count
    printf "  ${CYAN}Average:${NC}       %.1f lines per file\n" $(echo "scale=1; $total_lines / $dart_files" | bc 2>/dev/null || echo "0")
}

# Validation and verification
validate_flutter_project() {
    local project_dir="${1:-.}"
    local errors=0
    
    print_header
    print_bold "Flutter Project Validation:"
    echo ""
    
    # Check for pubspec.yaml
    if [ -f "$project_dir/pubspec.yaml" ]; then
        echo "  ${GREEN}âœ“${NC} pubspec.yaml found"
    else
        echo "  ${RED}âœ—${NC} pubspec.yaml missing"
        ((errors++))
    fi
    
    # Check for lib directory
    if [ -d "$project_dir/lib" ]; then
        echo "  ${GREEN}âœ“${NC} lib/ directory found"
    else
        echo "  ${RED}âœ—${NC} lib/ directory missing"
        ((errors++))
    fi
    
    # Check for main.dart
    if [ -f "$project_dir/lib/main.dart" ]; then
        echo "  ${GREEN}âœ“${NC} lib/main.dart found"
    else
        echo "  ${YELLOW}!${NC} lib/main.dart missing (may be intentional)"
    fi
    
    # Check Flutter SDK version
    if command -v flutter &> /dev/null; then
        local flutter_version=$(flutter --version | head -n1 | cut -d' ' -f2)
        echo "  ${GREEN}âœ“${NC} Flutter SDK: $flutter_version"
    else
        echo "  ${RED}âœ—${NC} Flutter SDK not found"
        ((errors++))
    fi
    
    # Validate pubspec.yaml syntax
    if [ -f "$project_dir/pubspec.yaml" ]; then
        if python3 -c "import yaml; yaml.safe_load(open('$project_dir/pubspec.yaml'))" 2>/dev/null; then
            echo "  ${GREEN}âœ“${NC} pubspec.yaml syntax valid"
        else
            echo "  ${RED}âœ—${NC} pubspec.yaml syntax error"
            ((errors++))
        fi
    fi
    
    echo ""
    if [ $errors -eq 0 ]; then
        print_success "Project validation passed"
    else
        print_warning "Found $errors validation errors"
    fi
    
    return $errors
}

# Compression and archiving
create_archive() {
    local source_dir="${1:-.}"
    local archive_name="${2:-flutter-backup-$(date +%Y%m%d-%H%M%S)}"
    local format="${3:-tar.gz}"
    
    print_status "Creating archive: $archive_name.$format"
    
    case "$format" in
        tar.gz)
            tar -czf "$BACKUP_DIR/$archive_name.tar.gz" -C "$source_dir" . \
                --exclude='.dart_tool' --exclude='build' --exclude='.packages'
            ;;
        zip)
            (cd "$source_dir" && zip -r "$BACKUP_DIR/$archive_name.zip" . \
                -x '*.dart_tool*' '*/build/*' '*/.packages*')
            ;;
        *)
            print_error "Unsupported archive format: $format"
            return 1
            ;;
    esac
    
    print_success "Archive created: $BACKUP_DIR/$archive_name.$format"
}

# Interactive mode
interactive_extract() {
    print_header
    print_bold "Interactive Flutter Extraction"
    echo ""
    
    # Get source directory
    echo -n "Enter source directory [./lib]: "
    read -r source_dir
    source_dir="${source_dir:-./lib}"
    
    if [ ! -d "$source_dir" ]; then
        print_error "Directory not found: $source_dir"
        return 1
    fi
    
    # Get output script name
    echo -n "Enter output script name [generate_flutter_app.sh]: "
    read -r output_script
    output_script="${output_script:-generate_flutter_app.sh}"
    
    # Get app name
    echo -n "Enter default app name [extracted_flutter_app]: "
    read -r app_name
    app_name="${app_name:-extracted_flutter_app}"
    
    # Options
    echo ""
    echo "Select additional options:"
    echo "1. Include pubspec.yaml"
    echo "2. Include assets"
    echo "3. Include tests"
    echo "4. Create backup archive"
    echo "5. Generate documentation"
    echo ""
    echo -n "Enter options (comma-separated numbers): "
    read -r options
    
    local extract_args=()
    extract_args+=("-s" "$source_dir")
    extract_args+=("-o" "$output_script")
    extract_args+=("-n" "$app_name")
    
    if [[ "$options" == *"1"* ]]; then
        extract_args+=("-p")
    fi
    if [[ "$options" == *"2"* ]]; then
        extract_args+=("-a")
    fi
    if [[ "$options" == *"3"* ]]; then
        extract_args+=("-t")
    fi
    if [[ "$options" == *"4"* ]]; then
        extract_args+=("--archive")
    fi
    if [[ "$options" == *"5"* ]]; then
        extract_args+=("--docs")
    fi
    
    extract_flutter_app "${extract_args[@]}"
}

# Help function
show_help() {
    print_header
    echo "USAGE:"
    echo "  $TOOL_NAME [COMMAND] [OPTIONS]"
    echo ""
    echo "COMMANDS:"
    echo "  extract          Extract Flutter app code to a generator script"
    echo "  interactive      Run interactive extraction wizard"
    echo "  analyze          Analyze project dependencies and metrics"
    echo "  validate         Validate Flutter project structure"
    echo "  backup           Create project backup archive"
    echo "  template         Template management commands"
    echo "  install          Install this CLI tool globally"
    echo "  uninstall        Remove this CLI tool from system"
    echo "  config           Show/edit configuration"
    echo "  version          Show version information"
    echo "  help             Show this help message"
    echo ""
    echo "EXTRACT OPTIONS:"
    echo "  -s, --source DIR       Source directory (default: ./lib)"
    echo "  -o, --output FILE      Output script name"
    echo "  -n, --name NAME        Default app name in generator"
    echo "  -p, --pubspec          Include pubspec.yaml"
    echo "  -a, --assets           Include assets folder"
    echo "  -t, --tests            Include test files"
    echo "  -f, --force            Overwrite existing files"
    echo "  -v, --verbose          Verbose output"
    echo "  -c, --compress LEVEL   Compression level (0-9)"
    echo "  --archive              Create backup archive"
    echo "  --docs                 Generate documentation"
    echo "  --exclude PATTERN      Exclude files matching pattern"
    echo "  --split-features       Extract each logical feature into its own file under lib/features/"
    echo "  --recreate             Force overwrite existing files (default = update-in-place)"
    echo "  --format FORMAT        Archive format (tar.gz, zip)"
    echo ""
    echo "TEMPLATE COMMANDS:"
    echo "  template list          List available templates"
    echo "  template create NAME   Create template from current project"
    echo "  template apply NAME    Apply template to new project"
    echo ""
    echo "EXAMPLES:"
    echo "  $TOOL_NAME extract -p -a --archive"
    echo "  $TOOL_NAME interactive"
    echo "  $TOOL_NAME analyze ./my_app"
    echo "  $TOOL_NAME backup --format zip"
    echo "  $TOOL_NAME template create my-starter-template"
    echo ""
}

# Version function
show_version() {
    print_header
    echo "Enhanced Flutter Code Extractor CLI v$VERSION"
    echo "A comprehensive tool to extract, backup, and recreate Flutter applications"
    echo ""
    echo "Features:"
    echo "  â€¢ Code extraction and generation"
    echo "  â€¢ Project analysis and metrics"
    echo "  â€¢ Template system"
    echo "  â€¢ Backup and archiving"
    echo "  â€¢ Interactive mode"
    echo "  â€¢ Project validation"
    echo ""
}

# Configuration management
show_config() {
    print_header
    print_bold "Current Configuration:"
    echo ""
    
    if [ -f "$CONFIG_FILE" ]; then
        cat "$CONFIG_FILE" | grep -v '^#' | grep -v '^$'
    else
        print_warning "No configuration file found"
        print_status "Run 'flutter-extractor config init' to create one"
    fi
}

# Function to escape content for bash heredoc
escape_for_heredoc() {
    sed "s/'/'\\\\''/g"
}

# Enhanced extraction function
extract_flutter_app() {
    load_config
    
    local source_dir="./lib"
    local output_script="generate_flutter_app.sh"
    local app_name="extracted_flutter_app"
    local include_pubspec=false
    local include_assets=false
    local include_tests=false
    local force_overwrite=false
    local verbose=false
    local create_archive=false
    local generate_docs=false
    local compression_level=6
    local archive_format="tar.gz"
    local split_features=false      # --split-features
    local recreate=false            # --recreate (forces overwrite)
    local exclude_patterns=()


    
    # Parse options

    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --recreate)
                recreate=true
                shift
                ;;
            --split-features)
                split_features=true
                shift
                ;;
            -s|--source)
                source_dir="$2"
                shift 2
                ;;
            -o|--output)
                output_script="$2"
                shift 2
                ;;
            -n|--name)
                app_name="$2"
                shift 2
                ;;
            -p|--pubspec)
                include_pubspec=true
                shift
                ;;
            -a|--assets)
                include_assets=true
                shift
                ;;
            -t|--tests)
                include_tests=true
                shift
                ;;
            -f|--force)
                force_overwrite=true
                shift
                ;;
            -v|--verbose)
                verbose=true
                shift
                ;;
            -c|--compress)
                compression_level="$2"
                shift 2
                ;;
            --archive)
                create_archive=true
                shift
                ;;
            --docs)
                generate_docs=true
                shift
                ;;
            --exclude)
                exclude_patterns+=("$2")
                shift 2
                ;;
            --format)
                archive_format="$2"
                shift 2
                ;;
            *)
                print_error "Unknown option: $1"
                exit 1
                ;;
        esac
    done
    
    # Validate inputs
    if [ ! -d "$source_dir" ]; then
        print_error "Source directory '$source_dir' not found!"
        exit 1
    fi
    
    if [ -f "$output_script" ] && [ "$force_overwrite" != true ]; then
        print_error "Output file '$output_script' already exists! Use -f to overwrite"
        exit 1
    fi
    
    print_header
    print_status "Enhanced Flutter app extraction starting..."
    
    # Count files for progress
    local total_files=0
    while IFS= read -r -d '' file; do
        ((total_files++))
    done < <(find "$source_dir" -name "*.dart" -type f -print0)
    
    if [ "$include_tests" = true ] && [ -d "test" ]; then
        while IFS= read -r -d '' file; do
            ((total_files++))
        done < <(find "test" -name "*.dart" -type f -print0)
    fi
    
    [ "$verbose" = true ] && print_status "Found $total_files Dart files to process"
    
    # Create enhanced generator script
    cat > "$output_script" << 'ENHANCED_GENERATOR_START'
#!/bin/bash

# Enhanced Flutter App Recreation Script
# Generated by Flutter Code Extractor CLI v2.0.0

set -e

# Colors and styling
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

# Enhanced output functions
print_header() {
    echo -e "${PURPLE}${BOLD}â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®${NC}"
    echo -e "${PURPLE}${BOLD}â”‚    Enhanced Flutter App Generator      â”‚${NC}"
    echo -e "${PURPLE}${BOLD}â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯${NC}"
    echo ""
}

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Progress indicator
show_progress() {
    local current=$1
    local total=$2
    local width=30
    local percentage=$((current * 100 / total))
    local filled=$((current * width / total))
    
    printf "\r${BLUE}Progress: [${GREEN}"
    printf "%*s" $filled | tr ' ' 'â–ˆ'
    printf "${NC}%*s${BLUE}] %d%%${NC}" $((width - filled)) "" $percentage
}

# Validation functions
validate_environment() {
    print_status "Validating environment..."
    
    if ! command -v flutter &> /dev/null; then
        print_error "Flutter SDK not found in PATH"
        print_error "Please install Flutter: https://flutter.dev/docs/get-started/install"
        return 1
    fi
    
    local flutter_version=$(flutter --version 2>/dev/null | head -n1 | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | head -n1)
    print_status "Flutter version: $flutter_version"
    
    return 0
}

# Show detailed help
show_help() {
    print_header
    echo "USAGE: $0 [app_name] [options]"
    echo ""
    echo "OPTIONS:"
    echo "  -h, --help           Show this help"
    echo "  --skip-deps          Skip flutter pub get"
    echo "  --skip-doctor        Skip flutter doctor"
    echo "  --skip-validation    Skip environment validation"
    echo "  --verbose            Show detailed output"
    echo "  --clean              Clean existing directory if it exists"
    echo ""
    echo "EXAMPLES:"
    echo "  $0 my_awesome_app"
    echo "  $0 my_app --clean --verbose"
    echo ""
}

# Parse command line arguments
APP_NAME=""
SKIP_DEPS=false
SKIP_DOCTOR=false
SKIP_VALIDATION=false
VERBOSE=false
CLEAN_EXISTING=false

while [[ $# -gt 0 ]]; do
    case $1 in
            --recreate)
                recreate=true
                shift
                ;;
            --split-features)
                split_features=true
                shift
                ;;
        -h|--help)
            show_help
            exit 0
            ;;
        --skip-deps)
            SKIP_DEPS=true
            shift
            ;;
        --skip-doctor)
            SKIP_DOCTOR=true
            shift
            ;;
        --skip-validation)
            SKIP_VALIDATION=true
            shift
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --clean)
            CLEAN_EXISTING=true
            shift
            ;;
        -*)
            print_error "Unknown option: $1"
            show_help
            exit 1
            ;;
        *)
            if [ -z "$APP_NAME" ]; then
                APP_NAME="$1"
            else
                print_error "Multiple app names specified"
                exit 1
            fi
            shift
            ;;
    esac
done

ENHANCED_GENERATOR_START

    # Add app name and validation logic
    echo "# Set default app name" >> "$output_script"
    echo "APP_NAME=\"\${APP_NAME:-$app_name}\"" >> "$output_script"
    echo "" >> "$output_script"
    
    # Add main generation logic
    cat >> "$output_script" << 'ENHANCED_MAIN_START'
# Main execution
main() {
    print_header
    print_status "Creating Flutter app: $APP_NAME"
    
    # Environment validation
    if [ "$SKIP_VALIDATION" != true ]; then
        validate_environment || exit 1
    fi
    
    # Handle existing directory
    if [ -d "$APP_NAME" ]; then
        if [ "$CLEAN_EXISTING" = true ]; then
            print_warning "Removing existing directory: $APP_NAME"
            rm -rf "$APP_NAME"
        else
            print_error "Directory '$APP_NAME' already exists!"
            print_status "Use --clean to remove existing directory"
            exit 1
        fi
    fi
    
    # Create Flutter project
    print_status "Creating new Flutter project..."
    if [ "$VERBOSE" = true ]; then
        flutter create "$APP_NAME"
    else
        flutter create "$APP_NAME" --quiet
    fi
    
    cd "$APP_NAME"
    
    # Clean default files
    print_status "Cleaning default files..."
    rm -f lib/main.dart
    [ -d "test" ] && rm -rf test/*
    
    local file_count=0
    local total_files=TOTAL_FILES_PLACEHOLDER
    
    print_status "Generating app structure and code..."

ENHANCED_MAIN_START

    # Process files with progress tracking
    local current_file=0
    
    # Process pubspec.yaml
    if [ "$include_pubspec" = true ] && [ -f "pubspec.yaml" ]; then
        echo "# Replace pubspec.yaml" >> "$output_script"
        echo "cat > 'pubspec.yaml' << 'PUBSPEC_EOF'" >> "$output_script"
        cat "pubspec.yaml" >> "$output_script"
        echo "PUBSPEC_EOF" >> "$output_script"
        echo "print_status \"âœ“ Updated pubspec.yaml\"" >> "$output_script"
        echo "((file_count++))" >> "$output_script"
        echo "show_progress \$file_count \$total_files" >> "$output_script"
        echo "" >> "$output_script"
    fi
    
    # Process Dart files with progress
    while IFS= read -r -d '' file; do
        local relative_path="${file#$source_dir/}"
        local dir_path=$(dirname "$relative_path")
        
        [ "$verbose" = true ] && show_progress $current_file $total_files
        
        # Create directory structure
        if [ "$dir_path" != "." ]; then
            echo "mkdir -p \"lib/$dir_path\"" >> "$output_script"
        fi
        
        # Add file content with progress
        echo "cat > 'lib/$relative_path' << 'DART_EOF'" >> "$output_script"
        cat "$file" | escape_for_heredoc >> "$output_script"
        echo "DART_EOF" >> "$output_script"
        echo "((file_count++))" >> "$output_script"
        echo "show_progress \$file_count \$total_files" >> "$output_script"
        echo "" >> "$output_script"
        
        ((current_file++))
    done < <(find "$source_dir" -name "*.dart" -type f -print0)
    
    # Process test files if requested
    if [ "$include_tests" = true ] && [ -d "test" ]; then
        while IFS= read -r -d '' file; do
            local relative_path="${file#./test/}"
            local dir_path=$(dirname "$relative_path")
            
            if [ "$dir_path" != "." ]; then
                echo "mkdir -p \"test/$dir_path\"" >> "$output_script"
            fi
            
            echo "cat > 'test/$relative_path' << 'TEST_EOF'" >> "$output_script"
            cat "$file" | escape_for_heredoc >> "$output_script"
            echo "TEST_EOF" >> "$output_script"
            echo "((file_count++))" >> "$output_script"
            echo "show_progress \$file_count \$total_files" >> "$output_script"
            echo "" >> "$output_script"
            
            ((current_file++))
        done < <(find "test" -name "*.dart" -type f -print0)
    fi
    
    # Process assets
    if [ "$include_assets" = true ] && [ -d "assets" ]; then
        echo "# Create assets" >> "$output_script"
        echo "print_status \"Processing assets...\"" >> "$output_script"
        echo "mkdir -p assets" >> "$output_script"
        
        while IFS= read -r -d '' file; do
            local relative_path="${file#./assets/}"
            local dir_path=$(dirname "$relative_path")
            
            if [ "$dir_path" != "." ]; then
                echo "mkdir -p \"assets/$dir_path\"" >> "$output_script"
            fi
            
            # Determine file type and encoding
            local mime_type=$(file --mime-type -b "$file" 2>/dev/null || echo "application/octet-stream")
            
            if [[ "$mime_type" =~ ^text/ ]]; then
                # Text files can be included directly
                echo "cat > 'assets/$relative_path' << 'ASSET_EOF'" >> "$output_script"
                cat "$file" | escape_for_heredoc >> "$output_script"
                echo "ASSET_EOF" >> "$output_script"
            else
                # Binary files need base64 encoding
                echo "base64 -d << 'ASSET_EOF' > 'assets/$relative_path'" >> "$output_script"
                base64 "$file" >> "$output_script"
                echo "ASSET_EOF" >> "$output_script"
            fi
            
            echo "((file_count++))" >> "$output_script"
            echo "show_progress \$file_count \$total_files" >> "$output_script"
        done < <(find "assets" -type f -print0 2>/dev/null || true)
    fi
    
    # Update total files count in the script
    sed -i.bak "s/TOTAL_FILES_PLACEHOLDER/$total_files/" "$output_script" && rm "$output_script.bak" 2>/dev/null || sed -i "s/TOTAL_FILES_PLACEHOLDER/$total_files/" "$output_script"
    
    # Add final completion logic
    cat >> "$output_script" << 'ENHANCED_FINAL'
    
    echo ""  # Clear progress line
    print_success "Generated $file_count files"
    
    # Install dependencies
    if [ "$SKIP_DEPS" != true ]; then
        print_status "Installing Flutter packages..."
        if [ "$VERBOSE" = true ]; then
            flutter pub get
        else
            flutter pub get > /dev/null 2>&1
        fi
        print_success "Dependencies installed"
    fi
    
    # Run Flutter doctor
    if [ "$SKIP_DOCTOR" != true ]; then
        print_status "Running Flutter doctor..."
        flutter doctor > /dev/null 2>&1 || print_warning "Flutter doctor reported issues"
    fi
    
    # Final success message
    echo ""
    print_success "ðŸŽ‰ Flutter app '$APP_NAME' created successfully!"
    echo ""
    print_status "Next steps:"
    echo "  ${CYAN}cd $APP_NAME${NC}"
    echo "  ${CYAN}flutter run${NC}"
    echo ""
    
    # Additional information
    if [ "$VERBOSE" = true ]; then
        print_status "Project structure:"
        find . -type f -name "*.dart" | head -10 | sed 's/^/  /'
        [ $(find . -type f -name "*.dart" | wc -l) -gt 10 ] && echo "  ... and $(( $(find . -type f -name "*.dart" | wc -l) - 10 )) more files"
    fi
}

# Execute main function
main "$@"

ENHANCED_FINAL

    chmod +x "$output_script"
    
    # Create archive if requested
    if [ "$create_archive" = true ]; then
        local archive_name="flutter-extract-$(date +%Y%m%d-%H%M%S)"
        create_archive "." "$archive_name" "$archive_format"
    fi
    
    # Generate documentation if requested
    if [ "$generate_docs" = true ]; then
        generate_documentation "$source_dir" "${output_script%.sh}_docs.md"
    fi
    
    echo ""
    print_success "ðŸŽ‰ Enhanced extraction completed!"
    printf "  ${CYAN}Files processed:${NC}   %d Dart files\n" $total_files
    [ "$include_pubspec" = true ] && echo "  ${GREEN}âœ“${NC} pubspec.yaml included"
    [ "$include_assets" = true ] && echo "  ${GREEN}âœ“${NC} Assets included"
    [ "$include_tests" = true ] && echo "  ${GREEN}âœ“${NC} Test files included"
    [ "$create_archive" = true ] && echo "  ${GREEN}âœ“${NC} Backup archive created"
    [ "$generate_docs" = true ] && echo "  ${GREEN}âœ“${NC} Documentation generated"
    
    echo ""
    print_success "Generator script: ${BOLD}$output_script${NC}"
    print_status "Usage: ${CYAN}./$output_script [app_name] [options]${NC}"
    echo ""
}

# Documentation generator
generate_documentation() {
    local source_dir="$1"
    local docs_file="$2"
    
    print_status "Generating documentation..."
    
    cat > "$docs_file" << DOC_EOF
# Flutter App Documentation

Generated on: $(date)
Source directory: $source_dir

## Project Overview

This documentation was automatically generated by the Enhanced Flutter Code Extractor CLI.

## File Structure

\`\`\`
DOC_EOF

    # Generate file tree
    find "$source_dir" -type f -name "*.dart" | sed 's|^|  |' >> "$docs_file"
    
    cat >> "$docs_file" << 'DOC_STRUCTURE'
```

## Dependencies Analysis

DOC_STRUCTURE

    if [ -f "pubspec.yaml" ]; then
        echo "### Main Dependencies" >> "$docs_file"
        echo '```yaml' >> "$docs_file"
        grep -A 20 "^dependencies:" pubspec.yaml | grep -E "^  [a-zA-Z]" >> "$docs_file" 2>/dev/null || echo "No dependencies found" >> "$docs_file"
        echo '```' >> "$docs_file"
        echo "" >> "$docs_file"
    fi
    
    cat >> "$docs_file" << 'DOC_END'

## Usage Instructions

1. Run the generator script:
   ```bash
   ./generate_flutter_app.sh my_app_name
   ```

2. Navigate to the created app:
   ```bash
   cd my_app_name
   ```

3. Run the app:
   ```bash
   flutter run
   ```

## Features Included

- âœ… Complete Dart source code
- âœ… Project structure recreation
- âœ… Dependency management
- âœ… Asset handling (if enabled)
- âœ… Test files (if enabled)

---

*Generated by Enhanced Flutter Code Extractor CLI v2.0.0*
DOC_END

    print_success "Documentation saved: $docs_file"
}

# Install function with enhanced features
install_cli() {
    print_header
    print_status "Installing Enhanced Flutter Code Extractor CLI..."
    
    # Create configuration directory
    init_config
    
    # Determine installation directory
    if [[ ":$PATH:" == *":$HOME/.local/bin:"* ]]; then
        INSTALL_DIR="$HOME/.local/bin"
    elif [[ ":$PATH:" == *":/usr/local/bin:"* ]] && [ -w "/usr/local/bin" ]; then
        INSTALL_DIR="/usr/local/bin"
    elif [[ ":$PATH:" == *":/usr/local/bin:"* ]]; then
        INSTALL_DIR="/usr/local/bin"
        NEED_SUDO=true
    else
        INSTALL_DIR="$HOME/.local/bin"
        mkdir -p "$INSTALL_DIR"
        print_warning "Created $INSTALL_DIR - you may need to add it to your PATH"
        echo ""
        print_status "Add this to your shell configuration (~/.bashrc, ~/.zshrc, etc.):"
        print_command "export PATH=\"\$HOME/.local/bin:\$PATH\""
        echo ""
    fi
    
    # Copy script with enhanced features
    if [ "$NEED_SUDO" = true ]; then
        sudo cp "$0" "$INSTALL_DIR/$TOOL_NAME"
        sudo chmod +x "$INSTALL_DIR/$TOOL_NAME"
    else
        cp "$0" "$INSTALL_DIR/$TOOL_NAME"
        chmod +x "$INSTALL_DIR/$TOOL_NAME"
    fi
    
    print_success "Installed to: $INSTALL_DIR/$TOOL_NAME"
    
    # Create shell completion (bash)
    if [ -d "$HOME/.bash_completion.d" ] || [ -d "/etc/bash_completion.d" ]; then
        local completion_dir="$HOME/.bash_completion.d"
        [ -d "/etc/bash_completion.d" ] && [ -w "/etc/bash_completion.d" ] && completion_dir="/etc/bash_completion.d"
        
        cat > "$completion_dir/$TOOL_NAME" << 'COMPLETION_EOF'
# Flutter Extractor CLI bash completion
_flutter_extractor_completion() {
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    
    if [ $COMP_CWORD -eq 1 ]; then
        opts="extract interactive analyze validate backup template install uninstall config version help"
        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi
    
    case "${prev}" in
        extract)
            opts="-s --source -o --output -n --name -p --pubspec -a --assets -t --tests -f --force -v --verbose --archive --docs"
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            ;;
        template)
            opts="list create apply"
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            ;;
        config)
            opts="show edit init"
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            ;;
    esac
}

complete -F _flutter_extractor_completion flutter-extractor
COMPLETION_EOF
        print_success "Shell completion installed"
    fi
    
    # Verify installation
    if command -v "$TOOL_NAME" &> /dev/null; then
        print_success "âœ… Installation verified - '$TOOL_NAME' is available in PATH"
        echo ""
        print_status "Try these commands:"
        print_command "$TOOL_NAME version"
        print_command "$TOOL_NAME interactive"
        print_command "$TOOL_NAME help"
    else
        print_warning "Installation complete but '$TOOL_NAME' not found in PATH"
        print_status "You may need to restart your terminal or source your shell config"
    fi
}

# Enhanced uninstall function
uninstall_cli() {
    print_header
    print_status "Uninstalling Enhanced Flutter Code Extractor CLI..."
    
    local found=false
    
    # Remove from installation directories
    for dir in "$HOME/.local/bin" "/usr/local/bin"; do
        if [ -f "$dir/$TOOL_NAME" ]; then
            if [ "$dir" = "/usr/local/bin" ]; then
                sudo rm "$dir/$TOOL_NAME"
            else
                rm "$dir/$TOOL_NAME"
            fi
            print_success "Removed from: $dir/$TOOL_NAME"
            found=true
        fi
    done
    
    # Remove shell completion
    for comp_dir in "$HOME/.bash_completion.d" "/etc/bash_completion.d"; do
        if [ -f "$comp_dir/$TOOL_NAME" ]; then
            if [ "$comp_dir" = "/etc/bash_completion.d" ]; then
                sudo rm "$comp_dir/$TOOL_NAME" 2>/dev/null || true
            else
                rm "$comp_dir/$TOOL_NAME" 2>/dev/null || true
            fi
            print_success "Removed shell completion"
        fi
    done
    
    # Ask about configuration removal
    if [ -d "$CONFIG_DIR" ]; then
        echo ""
        echo -n "Remove configuration directory ($CONFIG_DIR)? [y/N]: "
        read -r response
        if [[ "$response" =~ ^[Yy]$ ]]; then
            rm -rf "$CONFIG_DIR"
            print_success "Configuration removed"
        else
            print_status "Configuration preserved"
        fi
    fi
    
    if [ "$found" = false ]; then
        print_warning "CLI tool not found in standard installation directories"
    else
        print_success "Uninstallation completed"
    fi
}

# Main command dispatcher with enhanced routing
case "${1:-help}" in
    extract)
        shift
        extract_flutter_app "$@"
        ;;
    interactive|i)
        interactive_extract
        ;;
    analyze|a)
        shift
        if [ "$1" = "deps" ]; then
            analyze_dependencies "${2:-pubspec.yaml}"
        elif [ "$1" = "metrics" ]; then
            analyze_code_metrics "${2:-./lib}"
        else
            analyze_dependencies "${1:-pubspec.yaml}"
            echo ""
            analyze_code_metrics "${1:-./lib}"
        fi
        ;;
    validate|v)
        shift
        validate_flutter_project "${1:-.}"
        ;;
    backup|b)
        shift
        local format="tar.gz"
        local name=""
        while [[ $# -gt 0 ]]; do
            case $1 in
            --recreate)
                recreate=true
                shift
                ;;
            --split-features)
                split_features=true
                shift
                ;;
                --format)
                    format="$2"
                    shift 2
                    ;;
                --name)
                    name="$2"
                    shift 2
                    ;;
                *)
                    name="$1"
                    shift
                    ;;
            esac
        done
        create_archive "." "${name:-flutter-backup-$(date +%Y%m%d-%H%M%S)}" "$format"
        ;;
    template|t)
        shift
        case "${1:-list}" in
            list|l)
                list_templates
                ;;
            create|c)
                shift
                create_template "$1" "${2:-./lib}"
                ;;
            apply|a)
                shift
                print_status "Template application not yet implemented"
                ;;
            *)
                print_error "Unknown template command: $1"
                exit 1
                ;;
        esac
        ;;
    config|c)
        shift
        case "${1:-show}" in
            show|s)
                show_config
                ;;
            edit|e)
                ${EDITOR:-nano} "$CONFIG_FILE"
                ;;
            init|i)
                init_config
                ;;
            *)
                print_error "Unknown config command: $1"
                exit 1
                ;;
        esac
        ;;
    install)
        install_cli
        ;;
    uninstall)
        uninstall_cli
        ;;
    version|--version|-V)
        show_version
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        print_error "Unknown command: $1"
        echo ""
        show_help
        exit 1
        ;;
esac
